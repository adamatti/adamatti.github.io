{"pageProps":{"tag":"ai","posts":[{"slug":"2025-05-15-ai-leaderboard","title":"AI Leaderboards","summary":"Check which is the top LLM of the day","dateString":"2025-05-15","tags":["ai"],"content":"\n- [LLM Arena](https://beta.lmarena.ai/leaderboard/text)\n- [artificialanalysis.ai](https://artificialanalysis.ai/)\n- [Agent Arena](https://gorilla.cs.berkeley.edu/leaderboard.html)\n\nHope you find the best one for your case!\n"},{"slug":"2025-04-28-mcp-cli","title":"MCP sample - CLI","summary":"A basic MCP sample for CLI with typescript","dateString":"2025-04-28","tags":["typescript","ai","mcp"],"content":"\nThe idea here is not explain what MCP is, just show a sample:\n\n# Dependencies\n\nInstall it with npm/yarn/pnpm:\n\n- @modelcontextprotocol/sdk\n- zod\n\n# Code\n\n```typescript\nimport { Server } from \"@modelcontextprotocol/sdk/server/index.js\";\nimport { StdioServerTransport } from \"@modelcontextprotocol/sdk/server/stdio.js\";\nimport {\n  CallToolRequestSchema,\n  ListToolsRequestSchema,\n} from \"@modelcontextprotocol/sdk/types.js\";\nimport { z } from \"zod\";\n\nconst tools = [\n  {\n    name: \"Sum\",\n    description: \"do a sum\",\n    inputSchema: z.object({ x: z.number(), y: z.number() }),\n    handler: (args) => ({\n      content: [\n        { type: \"text\", text: `${args.x} + ${args.y} = ${args.x + args.y}` },\n      ],\n    }),\n  },\n];\n\nconst server = new Server(\n  { name: \"mcp-server\", version: \"0.0.1\" },\n  { capabilities: { tools: {} } }\n);\nserver.setRequestHandler(ListToolsRequestSchema, async () => {\n  return {\n    tools: tools.map((t) => ({\n      name: t.name,\n      description: t.description,\n      parameters: t.inputSchema,\n    })),\n  };\n});\n\nserver.setRequestHandler(CallToolRequestSchema, async (request) => {\n  const { name, arguments: args } = request.params;\n\n  try {\n    const tool = tools.find((t) => t.name === name);\n    if (!tool) {\n      throw new Error(`Tool unknown: ${name}`);\n    }\n    return await tool.handler(args);\n  } catch (error) {\n    console.error(`Error executing tool ${name}:`, error);\n    throw error;\n  }\n});\n\nconst main = async () => {\n  const transport = new StdioServerTransport();\n  await server.connect(transport);\n};\n\nmain();\n```\n\n# Sample calling\n\nList tools:\n\n```sh\necho '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"tools/list\"}' | pnpm dlx tsx cli.ts\n```\n\nExecuting operation:\n\n```sh\necho '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"tools/call\", \"params\": {\"name\": \"Sum\", \"arguments\": {\"x\": 1, \"y\": 2}}}' | pnpm dlx tsx cli.ts\n```\n\nFor http server check it [here](/blog/posts/2025-04-28-mcp-http);\n"},{"slug":"2025-04-28-mcp-http","title":"MCP sample - HTTP","summary":"A basic MCP http server sample with typescript","dateString":"2025-04-28","tags":["typescript","ai","mcp"],"content":"\nThe idea here is not explain what MCP is, just show a sample:\n\n# Dependencies\n\nInstall it with npm/yarn/pnpm:\n\n- @modelcontextprotocol/sdk\n- zod\n\n# Code\n\n```typescript\nimport express, { Request, Response } from \"express\";\nimport { SSEServerTransport } from \"@modelcontextprotocol/sdk/server/sse.js\";\nimport { McpServer } from \"@modelcontextprotocol/sdk/server/mcp.js\";\nimport { z } from \"zod\";\n\n///////////////////////////////////////////////////////////////////////////////\nconst tools = [\n  {\n    name: \"Sum\",\n    description: \"do a sum\",\n    inputSchema: z.object({ x: z.number(), y: z.number() }),\n    handler: (args: { x: number; y: number }) => ({\n      content: [\n        {\n          type: \"text\" as const,\n          text: `${args.x} + ${args.y} = ${args.x + args.y}`,\n        },\n      ],\n    }),\n  },\n];\n\nconst mcpServer = new McpServer({ name: \"mcp-server\", version: \"0.0.1\" });\n\nfor (const tool of tools) {\n  mcpServer.tool(\n    tool.name,\n    tool.description,\n    tool.inputSchema.shape,\n    tool.handler\n  );\n}\n\n///////////////////////////////////////////////////////////////////////////////\nconst app = express();\n\n// to support multiple simultaneous connections we have a lookup object from\n// sessionId to transport\nconst transports: { [sessionId: string]: SSEServerTransport } = {};\n\napp.get(\"/sse\", async (req: Request, res: Response) => {\n  const transport: SSEServerTransport = new SSEServerTransport(\n    \"/messages\",\n    res\n  );\n  const sessionId = transport.sessionId;\n\n  transports[transport.sessionId] = transport;\n  res.on(\"close\", () => {\n    delete transports[sessionId];\n  });\n  await mcpServer.connect(transport);\n});\n\napp.post(\"/messages\", async (req: Request, res: Response) => {\n  const sessionId = req.query.sessionId as string;\n  const transport = transports[sessionId];\n  if (transport) {\n    await transport.handlePostMessage(req, res);\n  } else {\n    res.status(400).send(\"No transport found for sessionId\");\n  }\n});\n\nconst port = process.env.PORT || 3000;\napp.listen(port, () => {\n  console.log(`HTTP Server running on port`, { port });\n});\n```\n\n# Test\n\nRun server:\n\n```sh\npnpm dlx esno ./sample.ts\n```\n\nConnect to SSE to create a session and receive responses (keep it running):\n\n```sh\ncurl -N http://localhost:3000/sse\n```\n\nTo list tools:\n\n```sh\ncurl --request POST \\\n  --url 'http://localhost:3000/messages?sessionId={SESSION ID}' \\\n  --header 'content-type: application/json' \\\n  --data '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"tools/list\", \"params\": {}}'\n```\n\nTo do a call:\n\n```sh\ncurl --request POST \\\n  --url 'http://localhost:3000/messages?sessionId={SESSION ID}' \\\n  --header 'content-type: application/json' \\\n  --data '{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"Sum\",\n    \"arguments\": {\n      \"x\": 1,\n      \"y\": 2\n    }\n  }\n}'\n```\n\nFor a cli sample check it [here](/blog/posts/2025-04-28-mcp-cli);\n"},{"slug":"2025-04-28-vector-dbs","title":"Vector DBs","summary":"Just a list of vector dbs","dateString":"2025-04-28","tags":["db","ai"],"content":"\n- Chroma (Clickhouse)\n- Elastic Search\n- Faiss\n- Milvus\n- Mongo\n- postgres / pgvector\n- Qdrant\n- Redis / redisearch\n- Rektor\n- Vespa\n- Weaviate\n\nThen I started to compare them on [grok](https://grok.com/chat/daa86a5b-ec2d-439a-a4ff-76a4d5d73b38)\n"}]},"__N_SSG":true}