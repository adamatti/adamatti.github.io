{"pageProps":{"posts":[{"slug":"2024-09-06-yarn","title":"Yarn Classic","summary":"It is time to move on","dateString":"2024-09-06","tags":["javascript","nodejs"],"content":"\nHey, are you using [yarn](https://classic.yarnpkg.com)? Great tool from [Facebook](https://facebook.com), right?\n\nBut how are you installing it?\n\n`npm install -g yarn`?\n\n### I have a bad news to tell you...\n\n> Yarn has not been distributed on npm since 2019 because of breaking changes that could impact deployments - Google AI\n\nand\n\n> Those versions entered maintenance mode in January 2020 - [yarn classic website](https://classic.yarnpkg.com/lang/en/docs/install)\n\n### So, what should I do?\n\nNeed to consider a better/newer package manager.\n\nIt could be:\n\n- [the new yarn version](https://yarnpkg.com/): as of today (09/06), it is on version 4.4.1\n- [PNPM](https://pnpm.io/), the faster alternative\n- [The NPM itself](https://www.npmjs.com/). The official tool. In 2024, it is faster than yarn classic\n\nThere are a lot of benchmarks out there, like:\n\n- https://romanglushach.medium.com/comparing-npm-yarn-and-pnpm-package-managers-which-one-is-right-for-your-distributed-project-to-4d7de2f0db8e\n- https://refine.dev/blog/pnpm-vs-npm-and-yarn\n- https://www.dhiwise.com/post/pnpm-vs-npm-vs-yarn-which-javascript-package-manager\n\n### How about me?\n\nI am using [PNPM](https://pnpm.io/) in my latest projects, both pet and professional, but already had some issues with it.\n\nIt all case by case, but I strongly recommend to use [PNPM](https://pnpm.io/) for fast local builds and CI.\n"},{"slug":"2024-09-04-feel","title":"People will never forget how you made them feel","summary":"- Maya Angelou","dateString":"2024-09-04","tags":["quote"],"content":"\n> I've learned that people will forget what you said, people will forget what you did, but people will never forget how you made them feel. - Maya Angelou\n"},{"slug":"2024-08-19-neverthrow","title":"Typescript Lib - Neverthrow","summary":"Encode failure into your program","dateString":"2024-08-19","tags":["typescript","lib"],"content":"\nJust saw [this tweet](https://x.com/mattpocockuk/status/1825552684994457946) from [@mattpocockuk](https://twitter.com/mattpocockuk), code below:\n\n![neverthrow](/assets/posts/2024-08-19-neverthrow.jpeg)\n\n[neverthrow](https://www.npmjs.com/package/neverthrow) is very similar to [arrow (kotlin)](https://arrow-kt.io/learn/typed-errors/working-with-typed-errors/) and the way [golang handle errors](https://go.dev/blog/error-handling-and-go).\n\n## Why?\n\nGreat explanation on [readme](https://github.com/supermacro/neverthrow), very bottom:\n\n> **Throwing** and **catching** is very similar to using **goto** statements - in other words; it makes reasoning about your programs harder. Secondly, by using **throw** you make the assumption that the caller of your function is implementing **catch**. This is a known source of errors. Example: One dev **throw**s and another dev uses the function without prior knowledge that the function will throw. Thus, and edge case has been left unhandled and now you have unhappy users, bosses, cats, etc.\n\n> With all that said, there are definitely good use cases for throwing in your program. But much less than you might think.\n\n## Would I use it in a production code (javascript/typescript)?\n\nProbably not as it changes the way the language was designed. A lot of frameworks/libs/integrations expect the code to throw on error (e.g. sentry, datadog, [express](https://expressjs.com/en/guide/error-handling.html)).\n\nUse [golang](https://go.dev/) instead. \n\nBut definitely I would use it for pet projects, to make the code more functional and avoid **goto** calls."},{"slug":"2024-08-16-aws-granted","title":"AWS Granted","summary":"A tool to easily access AWS roles","dateString":"2024-08-16","tags":["aws","tools"],"content":"\nI was trying to find an alternative to [aws-sso-creds-helper](https://www.npmjs.com/package/aws-sso-creds-helper) since it is archived/deprecated.\n\nThe \"official\" AWS solution is not great either (`aws sso login --profile <profile_name>`).\n\nMy coworkers are using [granted](https://docs.commonfate.io/granted/introduction). \n\nThe [installation](https://docs.commonfate.io/granted/getting-started#installing-the-cli) was simple:\n\n```\nbrew tap common-fate/granted\nbrew install granted\n```\n\nThe [configuration](https://docs.commonfate.io/granted/usage/automatic-config-generation#all-available-aws-sso-roles) was all auto generated:\n\n```\ngranted sso generate --sso-region ap-southeast-2 https://example.awsapps.com/start\n```\n\nAnd to use is basically `assume <role>`. I can even add it to my existing scripts.\n\nWe can also [export it to .env file](https://docs.commonfate.io/granted/usage/dotenv):\n\n```\nassume role-a --env\n```\n\nPlus, [we can access different profiles in different browser tabs](https://docs.commonfate.io/granted/usage/console):\n\n```\nassume -c <role>\n```\n\nSuper useful, highly recommended."},{"slug":"2024-08-06-fear","title":"Everything You Have Ever Wanted Is On The Other Side Of Fear","summary":"- George Addair","dateString":"2024-08-06","tags":["quote"],"content":"\n> Everything You Have Ever Wanted Is On The Other Side Of Fear - George Addair\n\nReceived it by email, but also saw it in [this blog post](https://www.forbes.com/sites/amyblaschka/2018/09/04/everything-youve-ever-wanted-is-sitting-on-the-other-side-of-fear/).\n\n"},{"slug":"2024-07-26-dora","title":"DORA metrics","summary":"A metric from Google teams","dateString":"2024-07-26","tags":["metrics","devops"],"content":"\nAre you aware of [DORA metrics](https://cloud.google.com/blog/products/devops-sre/using-the-four-keys-to-measure-your-devops-performance)?\n\nHow is your team classified?\n\n![Calculating the metrics](https://storage.googleapis.com/gweb-cloudblog-publish/images/Calculating_the_metrics_frOhcbp.max-2000x2000.jpg)"},{"slug":"2024-04-22-clt","title":"CLT x PJ","summary":"A manifest against CLT","dateString":"2024-04-22","tags":["salary"],"content":"\nThis is intended to explain to recruiters, friends and companies that I don't want to work as CLT - and how bad I think this model is.\n\nStarting as the simple one, and for both samples I am using a salary of 10k BRL/month to be easy to calculate.\n\n# *Pessoa Jurídica* (PJ) or contractor\n\nThe company pays 10k BRL. \n\nAs a developer in Brazil providing services to US companies I don't need to pay ISS. So all the taxes I have is 7%.\n\n```\n7% of 10k BRL = 700 BRL\n10k BRL - 7% = 9300 BRL\n```\n\nIt means 9300 BRL comes to my pocket. \n\nI decide my retired plan.\n\nI decide my health insurance.\n\nI decide my benefits.\n\nThat is it. Simple like that.\n\nNow the bad part:\n\n# CLT - Labor Law\n\nFor all this I am using the values from [this tool](https://utilitarios.grupodpg.com.br/utilitarios/categoria/calculo-facil/775/custo-de-contratao-pj-x-clt-x-autnomo) - in portuguese.\n\nThe company pays the same 10k.\n\nMy salary officially would be 7.560 BRL.\n\n8% would be FGTS = 604,80 BRL. *Fundo de garantia por tempo de serviço* (FGTS) or \"Service time guarantee fund\" it is a money that \"does not earn interest\", that I can access only to buy a house or during retirement.\n\n9% is 13º salary = 680,40 BRL. No reason to receive a piece of my salary only in the end of year, also does not earn interest.\n\n11,97% is vacations = 904,93 BRL. I need to pay each month to be able to take vacations, 30 days, max 3 intervals.\n\nCompany also pays 40% of all my FGTS in case I am fired by them (around 241,92 BRL). It is called *seguro desemprego* or unemployment insurance.\n\n7% is INSS = 513,01 BRL. This is the retirement plan from the government. And it is not mine, in Brazil we pay for the ones retired. And our demographic window is not getting better.\n\n14% is IRPF = 1.068,56 BRL. *Imposto de Renda Pessoa Física* or Personal Income Tax is tax. Simple like that.\n\nSo, in the end of month what I receive is 5.978,43 BRL. 60% of what company pays. Ok, you can argue that INSS/FGTS/13 Salary/vacations is something that I received, but there are several extra steps and it is delegated to the government to manage.\n\n# Ok, what else?\n\nQ: \"oh, but I have other benefits in CLT like gym / health insurance\". \nA: there is no magic. If company is paying extra, this money could come direct to my pocket.\n\nQ: \"how about exchange rate fluctuation?\"\nA: do you really think Brazilian real will behave better than any other currency? Just search on google things like `1 BRL in USD` / `1 BRL in EUR` / etc and check the graphic. \n\nQ: \"but if something bad happen? e.g. accident, fired\"\nA: I prefer to contract the insurances myself. I do have my emergency reserve, and unlike the one from the government mine does earn interest.\n\n# Which tool did I use? \n\nBasically [this one](https://utilitarios.grupodpg.com.br/utilitarios/categoria/calculo-facil/775/custo-de-contratao-pj-x-clt-x-autnomo). \n\nhttps://numbr.dev is also great to play with it real time and share.\n\n# Conclusion\n\nI don't like CLT. I don't want CLT. I don't see value to pass ownership of things to government. No reason to pay 27% of taxes if I can pay 7%.\n\nTo be clear, one FAANG / MANGA (Meta / Apple / Netflix / Google / Amazon) offered me to be CLT. MANGA is a dream for almost every developer, but I said no just because I don't see a point in CLT.\n\nAnd if you (LATAM developer) that have the option to choose I really hope you decide by PJ/contractor."},{"slug":"2024-04-18-taskfile","title":"Taskfile - an alternative for Makefiles","summary":"A 5 minutes tutorial","dateString":"2024-04-18","tags":["javascript","typescript","tools"],"content":"\nOk, Make/Makefiles are great. I spoke about then in the [last post](/blog/posts/2024-04-08-makefile).\n\nBut what if:\n\n- I want to break them in different files\n- Use a better syntax (maybe yaml?)\n- Cache the tasks, even the ones that don't generate artifacts (e.g. lint)\n- put tasks and aliases close\n- validate the task execution\n- have global tasks to run in any folder (e.g. backup)\n- dry run\n- watch task\n\n#### Taskfile to rescue\n\nJust need to [install Task](https://taskfile.dev/installation/) (or go-task on [github](https://github.com/go-task/task)).\n\nThe [documentation](https://taskfile.dev/) is pretty simple IMHO, but I want to highlight some things that I do use in daily bases that I think it does a great difference.\n\n## Show me the code\n\nFor this I will use the sample from [previous post](/blog/posts/2024-04-08-makefile) ([makefile here](https://github.com/adamatti/node-sample/blob/main/Makefile))\n\n```yaml\n# yaml-language-server: $schema=https://json.schemastore.org/taskfile.json\n---\nversion: '3'\n\nenv:\n  DATABASE_URL: postgres://postgres:sample@localhost:5432/sample\n\nincludes:\n  docker-compose:\n    aliases: [dc]\n    taskfile: ./Taskfile-docker-compose.yaml\n  prisma:\n    aliases: [p]\n    taskfile: ./Taskfile-prisma.yaml\n\ntasks:\n  default:\n    desc: Show help\n    aliases: [h]\n    silent: true\n    cmds:\n      - task -l --sort alphanumeric\n\n  clean:\n    desc: Remove node modules\n    aliases: [c]\n    cmds:\n      - rm -rf node-modules\n\n  install:\n    desc: Install dependencies\n    aliases: [i]\n    run: once\n    cmds:\n      - npm install\n    preconditions:\n      - test -f package.json\n      - test -f package-lock.json\n    sources:\n      - package.json\n      - package-lock.json\n    status:\n      - test -d node_modules\n\n  run-only:\n    aliases: [ro]\n    interactive: true\n    ignore_error: true\n    dotenv: ['.env']\n    cmds:\n      - task: install\n      - task: prisma:generate\n      - npx --yes esno src/index.ts\n\n  run:\n    desc: Run the project\n    aliases: [r]\n    cmds:\n      - task: docker-compose:up\n      - task: prisma:push\n      - task: run-only\n```\n\nThere are a lot of things going on here, so trying to explain some things:\n\n1. The first line is just for auto complete on IDEs (like vscode, zed)\n2. We can define global env vars in the script itself (e.g. `DATABASE_URL`)\n3. We can [import](https://taskfile.dev/usage/#including-other-taskfiles) part of the scripts. You just need to have your global ones (e.g. terraform, docker-compose, prisma, git, etc). It does work with remote files.\n4. You can expose/hide tasks with [internal flag](https://taskfile.dev/usage/#internal-tasks)\n\n## Now the best part - cache\n\nPay a close look on the install task.\n\n1. it only runs if `package.json` and `package-lock.json` are present ([programatic checks](https://taskfile.dev/usage/#using-programmatic-checks-to-cancel-the-execution-of-a-task-and-its-dependencies))\n2. [Prevent unnecessary work](https://taskfile.dev/usage/#prevent-unnecessary-work): it caches the execution using the `source` attribute.\n3. at the end it checks if the `node_modules` folder was created.\n4. Even caching based on the `source`, if you remove the `node_modules` folder (check) it will run again.\n\nSo, you just need to run your daily tasks (e.g. tests, lints, run local) and the script itself will detect what is pending and run it if needed.\n\nNo more crazy issues that you forgot to update a dependency or database change.\n\n## Ok, show me a normal day of work\n\nAt the first time, you just need to run `task r` to run the app. It will install dependencies, start database, apply db changes and run the app.\n\nBut what happen if someone changes a dependency? No problem. Taskfile will detect and will run `npm install` again.\n\nBut if someone just changes the db schema? No problem. It will generate the classes again.\n\nIf nothing changes, it will just run the app (ok, the docker part is not optimized, but you got the idea).\n\nIf need to stop the app and run again you can go direct to `task ro` (ro = run only).\n\n## Full Project\n\nAs always, the full sample is available on [github](https://github.com/adamatti/node-sample).\n\n## Closing thoughts\n\nNow go to the [documentation](https://taskfile.dev/usage/).\n\nRemove commands from `README.md` files and confluence/sharepoint. Also remove it from anemic `package.json` 😛\n\nMy global taskfiles are shared [here](https://github.com/adamatti/dotfiles/tree/main/taskfile) for reference.\n\nMy backup scripts using rsync are also on taskfiles, but this is a subject for another post.\n\n"},{"slug":"2024-04-08-makefile","title":"Makefiles - How to use them for automations","summary":"A 5 minutes tutorial","dateString":"2024-04-08","tags":["javascript","typescript","tools"],"content":"\nImagine the follow scenario: you do have a node api with typescript, that uses a database (postgres in this sample) and an orm ([prisma](https://www.prisma.io/)). Every time someone in the team adds a new dependency, you need to run `npm install`. \n\nDatabase changes? You need to generate the classes again with `npm run prisma generate`. Oh, you also need to apply the changes with `npm run prisma db push` (note: a real world project would use migrations files, so `npm run prisma migrate dev`).\n\nThen you moved to another service. Then moved back... oh, now need to start database again with `docker-compose up -d`. And so one... \n\nThe steps are documented in a readme file. Or you can get it from `package.json` -> `scripts`, but there is no comments there or command order/dependence. \n\nWhat do you do? \n\n#### Makefile to rescue\n\nSo, Make is a build automation tool (thanks [wikipedia](https://en.wikipedia.org/wiki/Make_(software)), and it is available by default in all unix systems.\n\nWith that you can:\n- create goals (tasks)\n- create multi line commands\n- use vars\n- use conditions\n- create aliases for the commands\n- map task dependencies\n- avoid re-running a task if artifact is already created (e.g. build). \"Kind\" of a cache (strong quotes here)\n\n#### So, show me a sample!\n\nSure... check this one (full project [here](https://github.com/adamatti/node-sample)):\n\n```makefile\ndefault:\n\t@echo \"Please specify a target to run\"\n\nclean:\n\trm -rf node_modules\n\nnode_modules:\n\tnpm install\n\ndocker-compose-up:\n\tdocker-compose up -d\n\nprisma-db-push:\n\tnpx --yes wait-on tcp:5432 && \\\n\tDATABASE_URL=postgres://postgres:sample@localhost:5432/sample npm run prisma db push\n\nprisma-generate:\n\tnpm run prisma generate\n\nrun-only:\n\tDATABASE_URL=postgres://postgres:sample@localhost:5432/sample \\\n\tnpx --yes esno src/index.ts\n\nrun: docker-compose-up prisma-generate prisma-db-push run-only\n\nformat:\n\tnpm run prisma format\n\tnpx --yes biome format --write ./src\n\n# Aliases\ninstall: node_modules\ndcu: docker-compose-up\npdp: prisma-db-push\npg: prisma-generate\nr: run\nro: run-only\nfirst: clean install run\nfresh: first\nf: fresh\n```\n\nAs you can see, a simple task is just \n\n```makefile\ntaskname: dependency1 dependency2\n    my list of commands\n    second command here\n    etc\n```\n\nwith the sample provided, I can install dependencies with `make node_modules`. \n\nIf you run it again, it will do nothing as the `node_modules` folder is already present (task name = folder name).\n\nIf I want to run my app the first time, I just need `make fresh`, and it will:\n- install dependencies\n- start database\n- generate orm classes\n- update database\n- run the app\n\nIf I want to run the app again, I don't need the full steps. I can go direct to `make run-only`.\n\n#### Ok, I am lazy than that\n\nWith dependencies, you can create aliases. e.g.\n\n```makefile\nr: run\nro: run-only\n```\n\nNow I just need `make r` to run my app. Or `make ro` to run-only.\nNote: I am lazier than that, I also [have an alias](https://github.com/adamatti/dotfiles/blob/bb23c786a3181b977874efe83530b65ec5de804a/zsh/aliases.zsh#L3) to run `make` with `m` only 😛\n\n#### How about the default task?\n\nIt uses the first task. Or the one defined on `.DEFAULT_GOAL := help` (add it as one of the first lines).\n\n#### Ok, but how about documentation\n\nThere is a [trick](https://marmelab.com/blog/2016/02/29/auto-documented-makefile.html) for that - just add those lines in the beginning of the file:\n\n```makefile\n.PHONY: help\n\nhelp:\n\t@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = \":.*?## \"}; {printf \"\\033[36m%-30s\\033[0m %s\\n\", $$1, $$2}'\n```\n\n...plus, `## comment` in the tasks you want comments. E.g.\n\n```makefile\nclean: ## remove dependencies\n\trm -rf node_modules\n\nprisma-generate: ## generate prisma classes\n\tnpm run prisma generate\n```\n\nNow you just need to run `make` or `make help` to see all tasks and comments, sorted by task name, e.g.\n\n```shell\n> make help\nclean                          remove dependencies\ndocker-compose-up              start dependencies\nfirst                          first execution\nformat                         format code\nfresh                          fresh execution\ninstall                        install dependencies\nprisma-db-push                 push prisma schema to database\nprisma-generate                generate prisma classes\nrun-only                       run the project\nrun                            run the project + dependencies\n```\n\n#### Advanced\n\n- How to hide the command from output? Just add `@` in the front of the command.\n- call an existing task in the middle/end of my commands? `$(MAKE) your task`\n- cache task? the task should match with the output folder or file name\n\n#### Show me the full project\n\nIt is [here](https://github.com/adamatti/node-sample), and the makefile is [here](https://github.com/adamatti/node-sample/blob/main/Makefile)\n\n#### Why post about makefile?\n\nBecause this is the [most watched video on my channel](https://www.youtube.com/watch?v=h4aV3C6BRDQ). And a lot of developers still adding commands on readme files on partially on package.json. We developers should automate things, even our daily tasks."},{"slug":"2024-04-05-vinejs","title":"Vinejs - js validation lib","summary":"An alternative to zod","dateString":"2024-04-05","tags":["javascript","typescript"],"content":"\nJust saw this new lib today - [Vinejs](https://vinejs.dev/). It called my attention as it is very similar to [zod](https://zod.dev/), but seems to be faster. Definitely I will consider it for my next pet projects.\n\n#### Basic Example\n\n```typescript\nimport vine from '@vinejs/vine'\n\nconst schema = vine.object({\n  email: vine.string().email(),\n  password: vine\n    .string()\n    .minLength(8)\n    .maxLength(32)\n    .confirmed()\n})\n\nconst data = getDataToValidate()\nawait vine.validate({ schema, data })\n```\n\n#### Benchmarks\n\n<div style=\"align:center\">\n  ![Benchmarks](/assets/posts/2024-04-05-vinejs/benchmark.jpg)\n</div>"},{"slug":"2023-12-30-tdc","title":"TDC - API Track","summary":null,"dateString":"2023-12-30","tags":["events","tdc"],"content":"\n<div style=\"align:center\">\n  ![Caricatura](/assets/posts/2023-12-30-tdc/caricatura.png)\n</div>\n\nOne more year I participated on [The Dev Conf](https://thedevconf.com/tdc/2023/future/trilha-api) as a track coordinator, API this time. One more row to [my profile there](https://thedevconf.com/palestrante/MarceloAdamatti).\n\nWe had talks about:\n\n- Legacy of Microservices\n- REST controllers\n- Governance\n- Contract tests\n- Open Telemetry\n- API Gateway\n- GraphQL\n\nWe had great feedback score from the audience (lowest avg vote was 4.3 of 5).\n\nThe photos are available [here](https://thedevconf.com/tdc/2022/future/fotos).\n\n#### To the speaker and track coordinators\n\nThanks a lot for all the efforts, dedication, time expended... We had a great event, it wouldn't be possible without that.\n\n#### To event coordinators\n\nThanks for pick me, it is a recognition of my work.\n\n#### To the audience\n\nI hope everyone enjoined as the feedback scored said. TDC is a community event, we did the talk selection based on what we thought would be the best for the audience. It is not easy to pick 7 from a good amount of submissions.\n\n#### To myself in future\n\nIt is a lot of work/coordination prior the event: people will cancel, have problems with the time of the slot, etc. But during and in the pass, the event is a great experience."},{"slug":"2023-07-04-happiness","title":"What happens when developers are (un)happy","summary":"Great article/reflection about happiness","dateString":"2023-07-04","tags":["happiness"],"content":"\nThis post is more a reminder to myself, as I keep searching about happiness formulas and reasons for unhappiness / poison behaviours. \n\nI just watched the video bellow (`O que acontece quando pessoas desenvolvedoras de software ficam (in) felizes?`), based on [this article](https://www.sciencedirect.com/science/article/pii/S0164121218300323?via%3Dihub).\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/1LSqxCZ-83U\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen style=\"text-align: center\"></iframe>\n\nTake a look on the consequences of unhappiness and happiness.\n\n![Consequences of unhappiness](/assets/posts/2023-07-04-happiness/unhappy.jpg)\n\n![Consequences of happiness](/assets/posts/2023-07-04-happiness/happy.jpg)\n\nDevelopment goes beyond code, product and methodologies. \n\nDifferent methodologies (e.g. scrum/kanban) will not address unhappiness issues."},{"slug":"2023-03-27-pyramid-of-needs","title":"The Pyramid of Needs","summary":"My insights on that topic","dateString":"2023-03-27","tags":["leadership","grow"],"content":"\nToday I received the [Refactoring newsletter](https://refactoring.fm/p/on-design-sweet-spot-threat-modeling) (which strongly recommend to sign in), and one of the sections caused me some reflections, the \"Pyramid of Needs\".\n\nWhile I had previously heard of [Maslow's hierarchy of needs](https://en.wikipedia.org/wiki/Maslow%27s_hierarchy_of_needs), this pyramid is specifically relevant to one's career.\n\nThis is the image from the post:\n\n![Pyramid of Needs](/assets/posts/pyramid-of-needs.webp)\n\n... and I strongly recommend you (reader) to go to the [original post]((https://refactoring.fm/p/on-design-sweet-spot-threat-modeling) ) to check all the details.\n\n- The majority of the professional that I knew were more interested (or stuck) in the *individual* layer. \n- The best ones (that I know, IMHO) passed the *Teamwork* layer.\n- I was 200% in the item *I have opportunities to learn and grow*. But it doesn't work if the *teamwork* layer (and the ones bellow) aren't fulfilled."},{"slug":"2023-03-16-quarkus","title":"Quarkus - a new try on native images","summary":"A blazing fast spring competitor","dateString":"2023-03-16","tags":["quarkus","java","jvm","gradle"],"content":"\nThree years ago I did some tests using [quarkus](https://quarkus.io/), to use on some microservices / pet projects. The commands to make it run using native binary are on this [gist](https://gist.github.com/adamatti/4633a7559647aaf779d60e3aad543b6b).\n\nToday I tried it again, just registering here my steps:\n\n### 1. Install quarkus\n\nI am using [sdkman](https://sdkman.io/) for it - it is a java version manager, similar to [fnm](https://github.com/Schniz/fnm) (for node).\n\nIt is easy as `sdk install quarkus`.\n\n### 2. Create a project\n\nJust need to run:\n\n```shell\nquarkus create app adamatti.github.io:learn-quarkus --extension='resteasy-reactive' --gradle\n```\n\nWhere `learn-quarkus` is the project name and `adamatti.github.io` is the main package name.\n\nYes, I decided to use [gradle](https://gradle.org/) instead of [maven](https://maven.apache.org/). Not willing to use XML in 2023 :-p\n\nThen I added this extension to build inside a docker container: \n\n```shell\ngradle addExtension --extensions=quarkus-container-image-docker\n```\n\n### 3. Run\n\n`./gradlew quarkusDev`. I can't deny, it is amazing be able to change source files without the need to stop/start the application multiple times\n\n### 4. Build native\n\n```shell\n./gradlew build -Dquarkus.package.type=native -Dquarkus.native.container-build=true\n```\n\nWith this, you don't need to have [graalvm](https://www.graalvm.org/) on local machine.\n\nThe binary file was created on `build` folder as `learn-quarkus-1.0.0-SNAPSHOT-runner`. It took ~4mins on my machine (Apple M1), 40mb is the size.\n\n### 5. Run the binary in a docker container\n\n... just to make sure it doesn't need any of the dependencies in my local machine (e.g. java) and simulate a real deploy.\n\n```shell\ndocker run --rm -it \\\n    -p \"8080:8080\" \\\n    -v ${PWD}/build/learn-quarkus-1.0.0-SNAPSHOT-runner:/app \\\n    centos \\\n    /app -Dquarkus.http.host=0.0.0.0\n```\n\n### Extra - version configuration\n\nJust created a `.sdkmanrc` file to make sure I would use the same versions in the future: \n\n```shell\n# Enable auto-env through the sdkman_auto_env config\n# Add key=value pairs of SDKs to use below\njava=11.0.11.9.1-amzn\ngradle=7.5.1\nquarkus=3.0.0.Alpha6\n```\n\n### Conclusion\n\n1. Quarkus is really fast, I would love to work with it in production\n2. Really loved the way the resources/controllers are created, e.g. \n\n```java\npackage adamatti.github.io;\n\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\n\n@Path(\"/hello\")\npublic class GreetingResource {\n\n    @GET\n    @Produces(MediaType.TEXT_PLAIN)\n    public String hello() {\n        return \"Hello from RESTEasy Reactive\";\n    }\n}\n```\n\n3. Loved the tests created with Gherkin syntax: \n\n```java\npackage adamatti.github.io;\n\nimport io.quarkus.test.junit.QuarkusTest;\nimport org.junit.jupiter.api.Test;\n\nimport static io.restassured.RestAssured.given;\nimport static org.hamcrest.CoreMatchers.is;\n\n@QuarkusTest\npublic class GreetingResourceTest {\n\n    @Test\n    public void testHelloEndpoint() {\n        given()\n          .when().get(\"/hello\")\n          .then()\n             .statusCode(200)\n             .body(is(\"Hello from RESTEasy Reactive\"));\n    }\n\n}\n```\n\n4. It also create tests for the native version (powered by the additional annotation):\n\n```java\npackage adamatti.github.io;\n\nimport io.quarkus.test.junit.QuarkusIntegrationTest;\n\n@QuarkusIntegrationTest\npublic class GreetingResourceIT extends GreetingResourceTest {\n    // Execute the same tests but in packaged mode.\n}\n```\n\n5. [Micronault](https://micronaut.io/) is still my preferred [spring](https://spring.io/) replacement, but this is a subject for another topic.\n\nI still curious about Quarkus usage, let's keep watching and see how does it goes."},{"slug":"2023-03-15-chatgpt-full-potential","title":"How to unlock ChatGPT full potential","summary":"a great prompt for better results","dateString":"2023-03-15","tags":["chatgpt"],"content":"\nJust received it on [this newsletter](https://atalho.substack.com/p/597-o-prompt-dos-prompts-como-desbloquear), it is helping me a lot for better prompts:\n\n```\nI want you to become my prompt engineer. Your goal is to help me craft the best possible prompt for my needs. The prompt will be used by you, ChatGPT. You will follow the following process:\n\n1. Your first response will be to ask me what the prompt should be about. I will provide my answer, but we will need to improve it through continual iterations by going through the next steps.\n\n2. Based on my input, you will generate 2 sections. a) Revised prompt (provide your rewritten prompt. it should be clear, concise, and easily understood by you), b) Questions (ask any relevant questions pertaining to what additional information is needed from me to improve the prompt).\n\n3. We will continue this iterative process with me providing additional information to you and you updating the prompt in the Revised prompt section until I say we are done.\n```\n\nHope it does help you too. \n\nGo to chat gpt [here](https://chat.openai.com/chat)"},{"slug":"2023-02-23-first","title":"First Blog post","summary":"Just a test post","dateString":"2023-02-23","tags":["test"],"content":"First blog post! \n\nThis is more a test to make it work. Thanks [@pixegami](https://www.youtube.com/watch?v=Hiabp1GY8fA) and [@Traversy Media\n](https://www.youtube.com/watch?v=MrjeefD8sac) for the great tutorials\n\nMy main goal here is to start producing content in English about programing languages, libraries, software development metodologies, leadership, culture, product, business... let's see how it goes, wish me lucky."}]},"__N_SSG":true}