{"pageProps":{"posts":[{"slug":"2025-05-15-ai-leaderboards","title":"AI Leaderboards","summary":"Check which is the top LLM of the day","dateString":"2025-05-15","tags":["ai"],"content":"\n- [LLM Arena](https://beta.lmarena.ai/leaderboard/text)\n- [artificialanalysis.ai](https://artificialanalysis.ai/)\n- [Agent Arena](https://gorilla.cs.berkeley.edu/leaderboard.html)\n\nHope you find the best one for your case!\n"},{"slug":"2025-05-05-flood","title":"The big flood from May/2024","summary":"Canoas, RS","dateString":"2025-05-05","tags":["personal"],"content":"\nOne year ago my city and house was affected by a big flood. It was hard.\n\n<iframe \n  src=\"https://docs.google.com/presentation/d/e/2PACX-1vQ0XPN1USbbYPf6U6REGkM1SUPYlzAiq1HDVa95Gh-frOJSYgtdZpbCb6tUoln4kmAimOJDMq6BWuFP/pubembed?start=false&loop=false&delayms=3000\" \n  frameborder=\"0\"\n  width=\"960\"\n  height=\"569\"\n  allowfullscreen=\"true\"\n  mozallowfullscreen=\"true\"\n  webkitallowfullscreen=\"true\"\n></iframe>\n\n# On the News\n\n- https://edition.cnn.com/2024/05/19/climate/brazil-floods-social-problems-intl/index.html\n- https://www.nytimes.com/2024/05/08/world/americas/brazil-flooding-photos.html\n- https://www.washingtonpost.com/world/interactive/2024/brazil-flood-porto-alegre-photos/\n- https://www.reuters.com/world/americas/waterborne-illness-now-threaten-flood-ravaged-southern-brazil-2024-05-30/\n- https://www.aljazeera.com/news/2024/5/4/its-going-to-be-worse-brazil-braces-for-more-pain-amid-record-flooding\n- https://www.theguardian.com/world/article/2024/may/03/brazil-floods-rio-grande-do-sul\n- https://news.sky.com/story/brazil-floods-29-people-killed-and-thousands-more-displaced-13127916\n"},{"slug":"2025-05-02-experience","title":"Good judgment comes from experience, and experience comes from bad judgment.","summary":"- Rita Mae Brown","dateString":"2025-05-02","tags":["quote"],"content":"\n> Good judgment comes from experience, and experience comes from bad judgment. - Rita Mae Brown\n"},{"slug":"2025-04-28-mcp-cli","title":"MCP sample - CLI","summary":"A basic MCP sample for CLI with typescript","dateString":"2025-04-28","tags":["typescript","ai","mcp"],"content":"\nThe idea here is not explain what MCP is, just show a sample:\n\n# Dependencies\n\nInstall it with npm/yarn/pnpm:\n\n- @modelcontextprotocol/sdk\n- zod\n\n# Code\n\n```typescript\nimport { Server } from \"@modelcontextprotocol/sdk/server/index.js\";\nimport { StdioServerTransport } from \"@modelcontextprotocol/sdk/server/stdio.js\";\nimport {\n  CallToolRequestSchema,\n  ListToolsRequestSchema,\n} from \"@modelcontextprotocol/sdk/types.js\";\nimport { z } from \"zod\";\n\nconst tools = [\n  {\n    name: \"Sum\",\n    description: \"do a sum\",\n    inputSchema: z.object({ x: z.number(), y: z.number() }),\n    handler: (args) => ({\n      content: [\n        { type: \"text\", text: `${args.x} + ${args.y} = ${args.x + args.y}` },\n      ],\n    }),\n  },\n];\n\nconst server = new Server(\n  { name: \"mcp-server\", version: \"0.0.1\" },\n  { capabilities: { tools: {} } }\n);\nserver.setRequestHandler(ListToolsRequestSchema, async () => {\n  return {\n    tools: tools.map((t) => ({\n      name: t.name,\n      description: t.description,\n      parameters: t.inputSchema,\n    })),\n  };\n});\n\nserver.setRequestHandler(CallToolRequestSchema, async (request) => {\n  const { name, arguments: args } = request.params;\n\n  try {\n    const tool = tools.find((t) => t.name === name);\n    if (!tool) {\n      throw new Error(`Tool unknown: ${name}`);\n    }\n    return await tool.handler(args);\n  } catch (error) {\n    console.error(`Error executing tool ${name}:`, error);\n    throw error;\n  }\n});\n\nconst main = async () => {\n  const transport = new StdioServerTransport();\n  await server.connect(transport);\n};\n\nmain();\n```\n\n# Sample calling\n\nList tools:\n\n```sh\necho '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"tools/list\"}' | pnpm dlx tsx cli.ts\n```\n\nExecuting operation:\n\n```sh\necho '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"tools/call\", \"params\": {\"name\": \"Sum\", \"arguments\": {\"x\": 1, \"y\": 2}}}' | pnpm dlx tsx cli.ts\n```\n\nFor http server check it [here](/blog/posts/2025-04-28-mcp-http);\n"},{"slug":"2025-04-28-mcp-http","title":"MCP sample - HTTP","summary":"A basic MCP http server sample with typescript","dateString":"2025-04-28","tags":["typescript","ai","mcp"],"content":"\nThe idea here is not explain what MCP is, just show a sample:\n\n# Dependencies\n\nInstall it with npm/yarn/pnpm:\n\n- @modelcontextprotocol/sdk\n- zod\n\n# Code\n\n```typescript\nimport express, { Request, Response } from \"express\";\nimport { SSEServerTransport } from \"@modelcontextprotocol/sdk/server/sse.js\";\nimport { McpServer } from \"@modelcontextprotocol/sdk/server/mcp.js\";\nimport { z } from \"zod\";\n\n///////////////////////////////////////////////////////////////////////////////\nconst tools = [\n  {\n    name: \"Sum\",\n    description: \"do a sum\",\n    inputSchema: z.object({ x: z.number(), y: z.number() }),\n    handler: (args: { x: number; y: number }) => ({\n      content: [\n        {\n          type: \"text\" as const,\n          text: `${args.x} + ${args.y} = ${args.x + args.y}`,\n        },\n      ],\n    }),\n  },\n];\n\nconst mcpServer = new McpServer({ name: \"mcp-server\", version: \"0.0.1\" });\n\nfor (const tool of tools) {\n  mcpServer.tool(\n    tool.name,\n    tool.description,\n    tool.inputSchema.shape,\n    tool.handler\n  );\n}\n\n///////////////////////////////////////////////////////////////////////////////\nconst app = express();\n\n// to support multiple simultaneous connections we have a lookup object from\n// sessionId to transport\nconst transports: { [sessionId: string]: SSEServerTransport } = {};\n\napp.get(\"/sse\", async (req: Request, res: Response) => {\n  const transport: SSEServerTransport = new SSEServerTransport(\n    \"/messages\",\n    res\n  );\n  const sessionId = transport.sessionId;\n\n  transports[transport.sessionId] = transport;\n  res.on(\"close\", () => {\n    delete transports[sessionId];\n  });\n  await mcpServer.connect(transport);\n});\n\napp.post(\"/messages\", async (req: Request, res: Response) => {\n  const sessionId = req.query.sessionId as string;\n  const transport = transports[sessionId];\n  if (transport) {\n    await transport.handlePostMessage(req, res);\n  } else {\n    res.status(400).send(\"No transport found for sessionId\");\n  }\n});\n\nconst port = process.env.PORT || 3000;\napp.listen(port, () => {\n  console.log(`HTTP Server running on port`, { port });\n});\n```\n\n# Test\n\nRun server:\n\n```sh\npnpm dlx esno ./sample.ts\n```\n\nConnect to SSE to create a session and receive responses (keep it running):\n\n```sh\ncurl -N http://localhost:3000/sse\n```\n\nTo list tools:\n\n```sh\ncurl --request POST \\\n  --url 'http://localhost:3000/messages?sessionId={SESSION ID}' \\\n  --header 'content-type: application/json' \\\n  --data '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"tools/list\", \"params\": {}}'\n```\n\nTo do a call:\n\n```sh\ncurl --request POST \\\n  --url 'http://localhost:3000/messages?sessionId={SESSION ID}' \\\n  --header 'content-type: application/json' \\\n  --data '{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"Sum\",\n    \"arguments\": {\n      \"x\": 1,\n      \"y\": 2\n    }\n  }\n}'\n```\n\nFor a cli sample check it [here](/blog/posts/2025-04-28-mcp-cli);\n"},{"slug":"2025-04-28-vector-dbs","title":"Vector DBs","summary":"Just a list of vector dbs","dateString":"2025-04-28","tags":["db","ai"],"content":"\n- Chroma (Clickhouse)\n- Elastic Search\n- Faiss\n- Milvus\n- Mongo\n- postgres / pgvector\n- Qdrant\n- Redis / redisearch\n- Rektor\n- Vespa\n- Weaviate\n\nThen I started to compare them on [grok](https://grok.com/chat/daa86a5b-ec2d-439a-a4ff-76a4d5d73b38)\n"},{"slug":"2025-02-20-system-design","title":"The system design universe","summary":"Great info graph from Shalini","dateString":"2025-02-20","tags":["architecture","tools","devops"],"content":"\n<center>\n![System Design](/assets/posts/2025-02-20-system-design.gif)\n</center>\n\nSource: [linkedin post](https://www.linkedin.com/posts/goyalshalini_imagine-building-a-system-that-scales-effortlessly-activity-7297140216073445376-GJjT)\n"},{"slug":"2024-12-31-ghostty","title":"Ghostty","summary":"terminal emulator","dateString":"2024-12-31","tags":["tools"],"content":"\nBye [warp](https://www.warp.dev/), hello [ghostty](https://github.com/ghostty-org/ghostty)!\n\nI just need a light and fast terminal with tabs and ability to split panels. Ghostty does it nicely and super easy to config.\n\nI saw it on [Theo's youtube channel](https://www.youtube.com/watch?v=VUxMfyzTM_Y&t=931s)\n\n<center>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/VUxMfyzTM_Y?si=lg4i0dVHswjg1NHI\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n</center>\n\nMy config so far:\n\n```properties\nbackground-blur-radius = 20\nbackground-opacity = 0.8\ncopy-on-select = true\nfont-family = \"Geist Mono\"\nfont-feature = -liga\n# font-size = 14\nquick-terminal-animation-duration = 0\nshell-integration = fish\ntheme = Blue Matrix\nunfocused-split-opacity = 0.6\nwindow-padding-color = extend\n```\n"},{"slug":"2024-11-29-cursor","title":"Cursor","summary":"The AI code editor","dateString":"2024-11-29","tags":["tools"],"content":"\nI received a newsletter today, [Which IDEs do software engineers love, and why?](https://blog.pragmaticengineer.com/ide-that-software-engineers-love/).\n\nThe top IDE in the list is [Cursor](https://www.cursor.com/). I am playing with it, it seems amazing.\n\nThe AI integration with the code is seamless, good feedbacks, fast, good suggestions. And it is a vscode fork, so I can use all my plugins.\n\nI am super impressed, I will play with it for a while and see how it goes.\n"},{"slug":"2024-11-29-memory-leak","title":"Memory Leak in nodejs/javascript","summary":"Some steps for finding/troubleshooting it","dateString":"2024-11-29","tags":["javascript","nodejs"],"content":"\nRecently I was working on a nodejs/express application to troubleshoot a memory leak. Those were the steps and tools I followed to identify the root cause.\n\n## 1. Reproduce the issue\n\nWe had it in two modules, one a http server and the other a sqs consumer.\n\n#### For the http server\n\nCreated a [k6](https://k6.io/) script for a small performance test:\n\n```javascript\n// script.js\nimport http from 'k6/http';\nimport { check, sleep } from 'k6';\n\nexport default function () {\n  const url = 'http://localhost:3000/test';\n  const res = http.get(url);\n  check(res, { success: (r) => r.status === 200 });\n}\n```\n\nAnd ran it with:\n\n```bash\n# 100 users, 1 hour\nk6 run -u 100 -d 1h script.js\n```\n\n#### For the SQS consumer\n\nBuilt a send command (note: I am using [localstack](https://localstack.cloud/)):\n\n```bash\n# send.sh\nAWS_REGION: \"us-east-1\" aws --endpoint-url=http://localhost:4566\n    sqs send-message\n    --region \"us-east-1\"\n    --queue-url http://localhost:4566/000000000000/queue\n    --message-body '{\"my\": \"message\"}'\n```\n\nand ran with with watch:\n\n```bash\nwatch -n .1 ./send.sh\n```\n\n## 2. Next step, collect the data\n\nInitially I was using node itself for generating it, e.g:\n\n```typescript\nimport v8 from 'node:v8';\n// ...\napp.get('/heapdump', (req, res) => {\n  const fileName = v8.writeHeapSnapshot();\n  res.send({ fileName });\n});\n```\n\nbut we can also use chrome devtools for this (I am using [brave](https://brave.com/), but sames applies):\n\n- run the app with the flag `--inspect`\n- go to `chrome://inspect` / `brave://inspect`, connect\n- go to `Memory` tab, click on `Take Heap Snapshot`\n\n## 3. Analyze the data\n\nThat is the tricky part. Pick the initial snapshot, run the test, pick the final snapshot, and compare.\n\nTry to correlate what you have there with the code. `Allocation on timeline` was also helpful for me.\n\nI strongly recommend take a look on [this presentation](https://www.youtube.com/watch?v=hliOMEQRqf8) for detailed explanation and showcase:\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/hliOMEQRqf8?si=iQ3kfqgyt6Aa_TZU\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n## Next?\n\nNow is the time to apply a fix and re-run the tests.\n\nWe found a lot of [DerivedLogger](https://github.com/winstonjs/winston/blob/c69cdb0cec15a138e0b6e374501e027d1c39606c/lib/winston/create-logger.js#L36) in the memory. It was because the code was calling `winston.createLogger` on each call to enrich the log. We switched to [child](https://github.com/winstonjs/winston#creating-child-loggers) call and problem solved.\n\nThere was no need to use [clinic.js](https://clinicjs.org/) this time.\n\n"},{"slug":"2024-11-27-monstache","title":"Monstache","summary":"A tool to stream data from mongodb to elasticsearch","dateString":"2024-11-27","tags":["tools","elasticsearch","mongodb","golang"],"content":"\nThere was a requirement here to stream data from [mongodb](https://www.mongodb.com/) to [Elasticsearch](https://www.elastic.co/), and I decided to research the existing tools.\n\nWe could use [elasticsearch-river-mongodb](https://github.com/richardwilly98/elasticsearch-river-mongodb/wiki), [implement a stream process in node](https://medium.com/@amulyakashyap09/stream-mongodb-to-elasticsearch-using-node-js-755b407eb744), some payed solutions... then I found [monstache](https://rwynn.github.io/monstache-site/) - a stream implementation in golang.\n\n## The good parts\n\n- Monstache is just a single binary without dependencies on runtimes like Ruby, Python or PHP - a [scratch image](https://hub.docker.com/_/scratch) should do the work\n- It does accept [transformations](https://rwynn.github.io/monstache-site/advanced/#transformation) - working sample [here](https://github.com/adamatti/learn-monstache/commit/51ab57c1be5adb3b60555a74838e49c50ffa05d4)\n- [Mappings](https://rwynn.github.io/monstache-site/advanced/#index-mapping) - working sample [here](https://github.com/adamatti/learn-monstache/commit/5ff11d50148354a28c8e027c7935fa0129607013)\n- [Versioning](https://rwynn.github.io/monstache-site/advanced/#indexing-metadata)? - working sample [here](https://github.com/adamatti/learn-monstache/commit/9768a64a0e12ac4c0926049b6731c377013df9bc)\n- Fetch references? check [embedding documents](https://rwynn.github.io/monstache-site/advanced/#embedding-documents)\n- A lot of mongo/elastic [configurations](https://rwynn.github.io/monstache-site/config) - e.g. replay, resume, resume-strategy\n- The [docker image](https://hub.docker.com/layers/rwynn/monstache/6.7.17/images/sha256-a275e45f20e2f2e64f30140479469b1241be340cd81ac5641ac391edcb1d092f?context=explore) is less than 15 mb (compressed size)\n\n## Ok, how can I make it faster?\n\nFrom [the docs](https://rwynn.github.io/monstache-site/advanced/#middleware):\n\n> It is HIGHLY recommended to use a golang plugin in production over a javascript plugin due to performance differences. Currently, golang plugins are orders of magnitude faster than javascript plugins. This is due to concurrency and the need to perform locking on the javascript environment. Javascript plugins are very useful for quickly prototyping a solution, however at some point it is recommended to convert them to golang plugins\n\nFor a golang working sample, check [my repo](https://github.com/adamatti/learn-monstache/commit/ae4d813485246f284d4583c4712a4adfaa94d44c)\n\n## The bad parts\n\nIt uses [streams](https://x.com/baptistejamin/status/1615310358528376832), and it seems it is not performant as using oplog ([ref](https://jira.mongodb.org/browse/SERVER-46979))\n\n## Conclusion\n\nI would give it a try and perform additional performance tests prior to go to prod.\n\nIt is nice it does support [multiple workers](https://rwynn.github.io/monstache-site/advanced/#workers), [High Availability](https://rwynn.github.io/monstache-site/advanced/#high-availability), etc\n\nIt has almost 9yrs since [first commit](https://github.com/rwynn/monstache/commit/04c590bf0896330405eeb12614aba1fc8e570fba), [1.3k starts on github](https://github.com/rwynn/monstache), [videos on youtube](https://www.youtube.com/results?search_query=monstache+elastic)\n\n## References\n\n- [Monstache Github Repo](https://github.com/rwynn/monstache)\n- [Monstache Website/Documentation](https://rwynn.github.io/monstache-site/)\n- [Github - my working sample](https://github.com/adamatti/learn-monstache)\n- [A docker compose with all you need](https://github.com/rwynn/monstache-showcase/blob/master/docker-compose.sc.yml)\n- [Step by Step how to create a golang plugin](https://github.com/rwynn/monstache/wiki/Go-plugin-guide)\n"},{"slug":"2024-11-22-preparation","title":"About preparation","summary":"- Abraham Lincoln","dateString":"2024-11-22","tags":["quote"],"content":"\n> Give me six hours to chop down a tree and I will spend the first four sharpening the axe. - Abraham Lincoln\n"},{"slug":"2024-11-12-complexity","title":"Complex Problems","summary":"- H.L. Mencken","dateString":"2024-11-12","tags":["quote"],"content":"\n> For every complex problem, there's a solution that is simple, neat, and wrong. - H.L. Mencken\n"},{"slug":"2024-11-11-fish","title":"Fish Shell","summary":"A new shell to rule them all","dateString":"2024-11-11","tags":["tools"],"content":"\nSince ~2015 - wow, almost 10 years ago - I was using [zsh](https://www.zsh.org/) + [oh-my-zsh](https://ohmyz.sh), and it was great. But after some years it was becoming show, and since I love to try new things I decided to explore new shell options.\n\nTL/DR: I am using [fish](https://fishshell.com/) now. Why?\n\n- It seems faster, at least in those first days / fresh install\n- I was using [oh-my-zsh](https://ohmyz.sh) mainly for aliases (e.g. [git](https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git/README.md)), but [abbreviations are much better for history and share commands](https://www.sean.sh/log/when-an-alias-should-actually-be-an-abbr/).\n- Auto complete seems to works better + syntax highlight\n- Functions (super easy syntax)\n- All the things that I was using continue to work as expected (e.g. [mise](/blog/posts/2024-09-24-mise), [zoxide](https://github.com/ajeetdsouza/zoxide), etc). No reason to not work, but worth to mention\n- Saw others moving from zsh to fish, it seems a natural moving\n- [11 reasons here](https://itsfoss.com/fish-shell-features/)\n\n# Super quick start\n\n```bash\n# Install fish on OSX\nbrew install fish\n\n# Add it to possible terminals\ncode /etc/shells\n# Manually add /opt/homebrew/bin/fish (ok, could do it with echo but choose not to)\n\n# Change default terminal\nchsh -s /opt/homebrew/bin/fish\n\n# Have fun\n```\n\n# Customizations\n\n- I installed [fisher](https://github.com/jorgebucaran/fisher) to add extensions, but didn't find a need for it yet. [Auto pair](https://github.com/jorgebucaran/autopair.fish) is the only one active\n  - [fish-abbreviation-tips](https://github.com/gazorby/fish-abbreviation-tips) is great, but since switched aliases for [abbreviations](https://www.sean.sh/log/when-an-alias-should-actually-be-an-abbr/) it doesn't make sense anymore.\n- For themes and colors I was using [starship](https://starship.rs/). Decided to stick on it for now, configs [here](https://github.com/adamatti/dotfiles/tree/main/starship).\n- [Abbreviations!](https://www.sean.sh/log/when-an-alias-should-actually-be-an-abbr/) You can create it even for parameters and can edit the commands prior to execute.\n\n# Next\n\n- Join [reddit group](https://www.reddit.com/r/fishshell/)\n- Take a look on [fisher plugins](https://github.com/jorgebucaran/awsm.fish#readme), [github repos](https://github.com/topics/fish), etc\n- Add a star in the [fish-shell](https://github.com/fish-shell/fish-shell) repo\n"},{"slug":"2024-11-07-mvp","title":"You’ve launched too late","summary":"- Reid Hoffman","dateString":"2024-11-07","tags":["quote"],"content":"\n> If you’re not embarrassed by the first version of your product, you’ve launched too late - Reid Hoffman\n"},{"slug":"2024-11-04-bankrupt","title":"Athletes Go Bankrupt","summary":"A shocking fact","dateString":"2024-11-04","tags":["finance"],"content":"\nI saw this in a webinar:\n\n> A Sports Illustrated article reports that 78% of NFL players and 60% of NBA players face serious financial hardships after retirement ([source](https://www.abi.org/feed-item/how-athletes-go-bankrupt-at-an-alarming-rate))\n\n> Sports Illustrated [estimates](https://vault.si.com/vault/2009/03/23/how-and-why-athletes-go-broke) 78% of NFL players face financial trouble within two years of leaving the game, and another 60% of NBA players are in the same boat five years after retirement ([source](https://cyndeowp.com/the-five-main-reasons-professional-athletes-go-broke/))\n\n## My take on this?\n\nIt is not how much you earn, it is about how you expend it.\n\nYou need to know the difference about active asset and passive asset.\n\n## References\n\n- https://vault.si.com/vault/2009/03/23/how-and-why-athletes-go-broke\n- https://www.abi.org/feed-item/how-athletes-go-bankrupt-at-an-alarming-rate\n- https://cyndeowp.com/the-five-main-reasons-professional-athletes-go-broke/\n- https://bolavip.com/en/nba/nfl-and-nba-players-who-lost-millions-and-went-broke-after-retiring\n- https://www.investopedia.com/financial-edge/0312/why-athletes-go-broke.aspx\n"},{"slug":"2024-10-28-orbstack","title":"OrbStack","summary":"A docker-desktop replacement","dateString":"2024-10-28","tags":["k8s","kubernetes","docker"],"content":"\nToday I replaced [docker-desktop](https://www.docker.com/products/docker-desktop/) by [OrbStack](https://orbstack.dev/).\n\nLike mentioned by [OrbStack](https://orbstack.dev/):\n\n> OrbStack is the fast, light, and easy way to run Docker containers and Linux. Develop at lightspeed with our Docker Desktop alternative\n\nIt is fully compatible, so no drastic changes.\n\nYou can check the [Docker x OrbStack comparison](https://docs.orbstack.dev/compare/docker-desktop), [Colima x OrbStack](https://docs.orbstack.dev/compare/colima) or [a review from @vortj](https://medium.com/@vortj/orbstack-review-a-game-changer-for-macos-developers-f1931a9db227).\n\nIf you want to fully uninstall docker desktop you can do it [here](https://docs.docker.com/desktop/uninstall/).\n\nIt also provides [kubernetes features](https://docs.orbstack.dev/kubernetes/), but I am using [kind](/blog/posts/2024-10-22-kind) for that.\n"},{"slug":"2024-10-22-kind","title":"Kind - k8s on local","summary":"Useful if you need to test ingress changes like me","dateString":"2024-10-22","tags":["k8s","kubernetes","docker"],"content":"\nOk, let's say you need to test ingress changes and want fast feedback, and don't have access to actual k8s cluster. What would you do?\n\n## Kind for the rescue\n\n[Kind](https://kind.sigs.k8s.io/) is just one of the options. It could be [Minikube](https://minikube.sigs.k8s.io/), Docker Desktop, [K3s](https://github.com/k3s-io/k3s), [Microk8s](https://microk8s.io/), etc\n\nMy goal is just share the steps I did to solve my problem, to others with similar needs and my future self.\n\n## 1. First, a node app\n\nNothing fancy, just the basic to test:\n\na. `server.js`\n\n```javascript\nconst express = require('express');\nconst app = express();\nconst PORT = process.env.PORT ?? 4000;\n\napp.get('/*', (req, res) => {\n  res.json({\n    date: new Date(),\n  });\n});\n\napp.listen(PORT, () => {\n  console.log('Server started');\n});\n```\n\nb. `package.json`\n\n```json\n{\n  \"scripts\": {},\n  \"dependencies\": {\n    \"express\": \"^4.21.1\"\n  }\n}\n```\n\nc. `Dockerfile`\n\n```Dockerfile\nFROM node:23\n\nRUN mkdir -p /app\nWORKDIR /app\n\nCOPY package.json ./\nRUN npm install\n\nCOPY server.js ./\n\nENV PORT=4000\nCMD [\"node\", \"/app/server.js\"]\n```\n\nThen build an image with something like `docker build --quiet . -t app:local`\n\n## 2. The cluster\n\n```bash\n# Install kind on mac\nbrew install kind\n\n# Create the cluster with custom config\ncat <<EOF | kind create cluster --config=-\nkind: Cluster\napiVersion: kind.x-k8s.io/v1alpha4\nnodes:\n- role: control-plane\n  kubeadmConfigPatches:\n  - |\n    kind: InitConfiguration\n    nodeRegistration:\n      kubeletExtraArgs:\n        node-labels: \"ingress-ready=true\"\n  extraPortMappings:\n  - containerPort: 80\n    hostPort: 80\n    protocol: TCP\n  - containerPort: 443\n    hostPort: 443\n    protocol: TCP\nEOF\n\n# Install nginx\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml --context kind-kind\n\n# Make sure it is working\nkubectl wait --namespace ingress-nginx \\\n  --for=condition=ready pod \\\n  --selector=app.kubernetes.io/component=controller \\\n  --timeout=90s --context kind-kind\n```\n\n## 3. deploy the app\n\na. publish image to the cluster:\n\n```bash\nkind load docker-image app:local\n```\n\nb. create pod, service, ingress: just save it in a file (e.g. k8s.yaml)\n\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: node-app\n  labels:\n    app: node-app\nspec:\n  type: ClusterIP\n  ports:\n    - port: 80\n      targetPort:\n      protocol: TCP\n      name: http\n  selector:\n    app: node-app\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: node-app\nspec:\n  replicas: 1\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 2\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: node-app\n  template:\n    metadata:\n      labels:\n        app: node-app\n    spec:\n      serviceAccountName: default\n      securityContext: null\n      containers:\n        - name: node-app\n          image: 'app:local'\n          env:\n            - name: PORT\n              value: '80'\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: node-app\n  annotations:\n    kubernetes.io/ingress.class: nginx\n\nspec:\n  rules:\n    - host: 'node-app.com'\n      http:\n        paths:\n          - backend:\n              service:\n                name: node-app\n                port:\n                  number: 80\n            pathType: ImplementationSpecific\n```\n\nc. apply the changes:\n\n```bash\nkubectl apply -f k8s.yaml --context kind-kind\n\n```\n\n## 4. Testing\n\na. with curl\n\n```\ncurl --url http://localhost/test --header 'HOST: node-app.com'\n```\n\nor\n\nb. with `/etc/hosts`\n\n- Add `127.0.0.1 node-app.com` to `/etc/hosts`\n- Access node-app.com on any browser\n\n## 5. Done?\n\nSo, destroy the cluster to release memory:\n\n```bash\nkind delete cluster\n```\n\n## So...\n\nIf you tried it and worked (or not), pls let me know.\n\nFor me it worked, I hope it help others and my future self\n"},{"slug":"2024-10-01-gardeners","title":"Software Gardener","summary":"Gardener x Engineer","dateString":"2024-10-01","tags":[],"content":"\nI returned to use my old machine and found this screenshot - took it at 2022-02-10:\n\n<center>\n![Gardener](/assets/posts/2024-10-01-gardener.png)\n</center>\n\nSorry, I don't know or remember the source to give credits.\n\nBut I do agree with the message. We - developers - should be more gardeners and less engineers.\n\nThis mindset also applies to parenting...\n"},{"slug":"2024-09-27-cargo-cult","title":"Cargo Cult","summary":"You need to know the \"why\" to receive the benefits from the Gods","dateString":"2024-09-27","tags":["agile"],"content":"\nThe first time I saw this expression was at a [tech conference](https://thedevconf.com/palestrante/alexandre-freire-kawakami), a talk from [Alexandre Freire](https://www.linkedin.com/in/agile-cto).\n\nIf you don't know it, take a look at this video:\n\n<center>\n<iframe width=\"560\" height=\"315\" \n  src=\"https://www.youtube.com/embed/qmlYe2KS0-Y?si=54JTIezivr5vAXK4\" \n  title=\"YouTube video player\" \n  frameborder=\"0\" \n  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" \n  referrerpolicy=\"strict-origin-when-cross-origin\" \n  allowfullscreen></iframe>\n</center>\n\nThere are more details on [Wikipedia](https://en.wikipedia.org/wiki/Cargo_cult), but TL/DR: indigenous saw planes dropping food / etc and thought it was God's gifts. When the war stopped and the army left, they repeated the same actions to keep receiving the gifts.\n\nWhat message do you think we could take from this?\n\n### If we don't know WHY we are doing something, we are not going to receive the benefits\n\nIn the agile context:\n\n- If you don't know why we do retros, the team will not get better\n- If you don't know why we do stand up / daily meetings, you may not have address communication and collaboration issues\n\nIn the tools context:\n\n- If you don't know how \"the tool\" works and which problems it solves, you may introduce new issues\n  - Some samples: kafka/kubernetes/microservices/graphql/etc\n\nIn the finance context:\n\n- If you don't know how the market works, you may buy on high and sell on low\n- If you don't know about Bitcoin, you may lose money\n\nWe can go on and on, about weight loss, metrics, entrepreneurship...\n\nUsing Steve Jobs shirts will not make you rich...\n\nNeither wake up at 4 am...\n\nNeither cold showers...\n"},{"slug":"2024-09-24-mise","title":"Mise: a version manager","summary":"A replacement for gvm, nvm, etc","dateString":"2024-09-24","tags":["tools"],"content":"\nI saw in twitter some time ago, I think it was suggested by [Akita](https://twitter.com/AkitaOnRails?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor) - disclaimer: unable to check here as [twitter still blocked in Brazil](https://www.bbc.com/news/articles/c5y3rnl5qv3o) - about [mise](https://github.com/jdx/mise), a version manager.\n\nPreviously I was using [gvm](https://github.com/moovweb/gvm) for golang, [fnm](https://github.com/Schniz/fnm) for node (it is like [nvm](https://github.com/nvm-sh/nvm), but faster), [sdkman](https://sdkman.io/) for java/jvm, some crazy tools for python/ruby, and [brew](https://brew.sh/) for the other (e.g. [bun](https://bun.sh/), [deno](https://deno.com/)).\n\nWith [mise](https://github.com/jdx/mise) I can use one tool for all. It is great because:\n\n### 1. It does respect the other format configurations\n\n`.ruby-version`? `.nvmrc`? We don't need to change existing projects to use it.\n\n### 2. It is easy to install\n\n`mise install` in an existing app, `mise use node@lts` / `mise use deno@latest` / etc to add a new dependency.\n\nYou can also install global ones, like `mise use --global opentofu@latest`\n\n### 3. Easy to check required versions\n\nJust run `mise ls`\n\n### 4. Easy to upgrade all\n\n`mise up`\n\n### 5. It has hundreds of integrations\n\nCheck it all at [here](https://mise.jdx.dev/plugins.html)\n\n### Others\n\nIt does integrate with bash / zsh for auto version switch (switch on cd).\n\nIt does support environment vars control and task automation, but I do prefer other tools for that.\n\nI hope you enjoy it, let me know your thoughts in the comments.\n"},{"slug":"2024-09-11-salary","title":"Salary as software engineer","summary":"Just sharing some links","dateString":"2024-09-11","tags":["salary"],"content":"\nWhen people ask me about salaries working from LATAM to US companies, usually I share those links:\n\n- https://app.comprehensive.io/benchmarking/s/jobFamily=Software+Engineering&level=IC3\n- https://www.levels.fyi/2023\n  - Check the [heatmap](https://www.levels.fyi/heatmap/)\n- https://codesubmit.io/blog/software-engineer-salary-by-country/\n- https://www.payscale.com/research/US/Job=Software_Engineer/Salary\n- [Youtube - I asked developers how much MONEY they make](https://www.youtube.com/watch?v=8jRB-2AQ-mI) (note: it wasn't me)\n\n### Oh, but I don't have a good English level\n\nCheck [this post from X-Team](https://x-team.com/blog/english-skill-as-a-developer)\n\nPing me if you thing I can help you to reach those positions.\n"},{"slug":"2024-09-10-cloudflare","title":"Cloudflare workers","summary":"Just created my hello world there","dateString":"2024-09-10","tags":["javascript","nodejs","typescript"],"content":"\nI just tried the new cloudflare worker. To create a sample and deploy there, you just need to run one single command:\n\n```\npnpm create cloudflare@latest <project name>\n```\n\n... and of course, a lot of prompts.\n\nI removed some dead code (editor config, prettier), added [biome](https://biomejs.dev/), added a [taskfile](https://taskfile.dev/) (I will forget the commands). Also played with [Hono](https://github.com/honojs/hono) - the web framework [suggested by Cloudflare](https://www.youtube.com/watch?v=H7Qe96fqg1M) and added an AI endpoint.\n\nPretty simple, reminds me the good old days with the free [Heroku](https://www.heroku.com/) tier.\n\nFor sure I will consider it for my pet projects.\n\nMy full code is available on [github](https://github.com/adamatti/learn-cf-worker).\n\nNext, I will try it with [remix](https://remix.run/) for a full stack experience. If I got it right, it should be [super simple](https://hono.dev/examples/with-remix) (or [creating from scratch](https://developers.cloudflare.com/pages/framework-guides/deploy-a-remix-site/)).\n"},{"slug":"2024-09-06-yarn","title":"Yarn Classic","summary":"It is time to move on","dateString":"2024-09-06","tags":["javascript","nodejs"],"content":"\nHey, are you using [yarn](https://classic.yarnpkg.com)? Great tool from [Facebook](https://facebook.com), right?\n\nBut how are you installing it?\n\n`npm install -g yarn`?\n\n### I have a bad news to tell you...\n\n> Yarn has not been distributed on npm since 2019 because of breaking changes that could impact deployments - Google AI\n\nand\n\n> Those versions entered maintenance mode in January 2020 - [yarn classic website](https://classic.yarnpkg.com/lang/en/docs/install)\n\n### So, what should I do?\n\nNeed to consider a better/newer package manager.\n\nIt could be:\n\n- [the new yarn version](https://yarnpkg.com/): as of today (09/06), it is on version 4.4.1\n- [PNPM](https://pnpm.io/), the faster alternative\n- [The NPM itself](https://www.npmjs.com/). The official tool. In 2024, it is faster than yarn classic\n\nThere are a lot of benchmarks out there, like:\n\n- https://romanglushach.medium.com/comparing-npm-yarn-and-pnpm-package-managers-which-one-is-right-for-your-distributed-project-to-4d7de2f0db8e\n- https://refine.dev/blog/pnpm-vs-npm-and-yarn\n- https://www.dhiwise.com/post/pnpm-vs-npm-vs-yarn-which-javascript-package-manager\n\n### How about me?\n\nI am using [PNPM](https://pnpm.io/) in my latest projects, both pet and professional, but already had some issues with it.\n\nIt all case by case, but I strongly recommend to use [PNPM](https://pnpm.io/) for fast local builds and CI.\n"},{"slug":"2024-09-04-feel","title":"People will never forget how you made them feel","summary":"- Maya Angelou","dateString":"2024-09-04","tags":["quote"],"content":"\n> I've learned that people will forget what you said, people will forget what you did, but people will never forget how you made them feel. - Maya Angelou\n"},{"slug":"2024-08-19-neverthrow","title":"Typescript Lib - Neverthrow","summary":"Encode failure into your program","dateString":"2024-08-19","tags":["typescript","lib"],"content":"\nJust saw [this tweet](https://x.com/mattpocockuk/status/1825552684994457946) from [@mattpocockuk](https://twitter.com/mattpocockuk), code below:\n\n![neverthrow](/assets/posts/2024-08-19-neverthrow.jpeg)\n\n[neverthrow](https://www.npmjs.com/package/neverthrow) is very similar to [arrow (kotlin)](https://arrow-kt.io/learn/typed-errors/working-with-typed-errors/) and the way [golang handle errors](https://go.dev/blog/error-handling-and-go).\n\n## Why?\n\nGreat explanation on [readme](https://github.com/supermacro/neverthrow), very bottom:\n\n> **Throwing** and **catching** is very similar to using **goto** statements - in other words; it makes reasoning about your programs harder. Secondly, by using **throw** you make the assumption that the caller of your function is implementing **catch**. This is a known source of errors. Example: One dev **throw**s and another dev uses the function without prior knowledge that the function will throw. Thus, and edge case has been left unhandled and now you have unhappy users, bosses, cats, etc.\n\n> With all that said, there are definitely good use cases for throwing in your program. But much less than you might think.\n\n## Would I use it in a production code (javascript/typescript)?\n\nProbably not as it changes the way the language was designed. A lot of frameworks/libs/integrations expect the code to throw on error (e.g. sentry, datadog, [express](https://expressjs.com/en/guide/error-handling.html)).\n\nUse [golang](https://go.dev/) instead. \n\nBut definitely I would use it for pet projects, to make the code more functional and avoid **goto** calls."},{"slug":"2024-08-16-aws-granted","title":"AWS Granted","summary":"A tool to easily access AWS roles","dateString":"2024-08-16","tags":["aws","tools"],"content":"\nI was trying to find an alternative to [aws-sso-creds-helper](https://www.npmjs.com/package/aws-sso-creds-helper) since it is archived/deprecated.\n\nThe \"official\" AWS solution is not great either (`aws sso login --profile <profile_name>`).\n\nMy coworkers are using [granted](https://docs.commonfate.io/granted/introduction). \n\nThe [installation](https://docs.commonfate.io/granted/getting-started#installing-the-cli) was simple:\n\n```\nbrew tap common-fate/granted\nbrew install granted\n```\n\nThe [configuration](https://docs.commonfate.io/granted/usage/automatic-config-generation#all-available-aws-sso-roles) was all auto generated:\n\n```\ngranted sso generate --sso-region ap-southeast-2 https://example.awsapps.com/start\n```\n\nAnd to use is basically `assume <role>`. I can even add it to my existing scripts.\n\nWe can also [export it to .env file](https://docs.commonfate.io/granted/usage/dotenv):\n\n```\nassume role-a --env\n```\n\nPlus, [we can access different profiles in different browser tabs](https://docs.commonfate.io/granted/usage/console):\n\n```\nassume -c <role>\n```\n\nSuper useful, highly recommended."},{"slug":"2024-08-06-fear","title":"Everything You Have Ever Wanted Is On The Other Side Of Fear","summary":"- George Addair","dateString":"2024-08-06","tags":["quote"],"content":"\n> Everything You Have Ever Wanted Is On The Other Side Of Fear - George Addair\n\nReceived it by email, but also saw it in [this blog post](https://www.forbes.com/sites/amyblaschka/2018/09/04/everything-youve-ever-wanted-is-sitting-on-the-other-side-of-fear/).\n\n"},{"slug":"2024-07-26-dora","title":"DORA metrics","summary":"A metric from Google teams","dateString":"2024-07-26","tags":["metrics","devops"],"content":"\nAre you aware of [DORA metrics](https://cloud.google.com/blog/products/devops-sre/using-the-four-keys-to-measure-your-devops-performance)?\n\nHow is your team classified?\n\n![Calculating the metrics](https://storage.googleapis.com/gweb-cloudblog-publish/images/Calculating_the_metrics_frOhcbp.max-2000x2000.jpg)"},{"slug":"2024-04-22-clt","title":"CLT x PJ","summary":"A manifest against CLT","dateString":"2024-04-22","tags":["salary"],"content":"\nThis is intended to explain to recruiters, friends and companies that I don't want to work as CLT - and how bad I think this model is.\n\nStarting as the simple one, and for both samples I am using a salary of 10k BRL/month to be easy to calculate.\n\n# *Pessoa Jurídica* (PJ) or contractor\n\nThe company pays 10k BRL. \n\nAs a developer in Brazil providing services to US companies I don't need to pay ISS. So all the taxes I have is 7%.\n\n```\n7% of 10k BRL = 700 BRL\n10k BRL - 7% = 9300 BRL\n```\n\nIt means 9300 BRL comes to my pocket. \n\nI decide my retired plan.\n\nI decide my health insurance.\n\nI decide my benefits.\n\nThat is it. Simple like that.\n\nNow the bad part:\n\n# CLT - Labor Law\n\nFor all this I am using the values from [this tool](https://utilitarios.grupodpg.com.br/utilitarios/categoria/calculo-facil/775/custo-de-contratao-pj-x-clt-x-autnomo) - in portuguese.\n\nThe company pays the same 10k.\n\nMy salary officially would be 7.560 BRL.\n\n8% would be FGTS = 604,80 BRL. *Fundo de garantia por tempo de serviço* (FGTS) or \"Service time guarantee fund\" it is a money that \"does not earn interest\", that I can access only to buy a house or during retirement.\n\n9% is 13º salary = 680,40 BRL. No reason to receive a piece of my salary only in the end of year, also does not earn interest.\n\n11,97% is vacations = 904,93 BRL. I need to pay each month to be able to take vacations, 30 days, max 3 intervals.\n\nCompany also pays 40% of all my FGTS in case I am fired by them (around 241,92 BRL). It is called *seguro desemprego* or unemployment insurance.\n\n7% is INSS = 513,01 BRL. This is the retirement plan from the government. And it is not mine, in Brazil we pay for the ones retired. And our demographic window is not getting better.\n\n14% is IRPF = 1.068,56 BRL. *Imposto de Renda Pessoa Física* or Personal Income Tax is tax. Simple like that.\n\nSo, in the end of month what I receive is 5.978,43 BRL. 60% of what company pays. Ok, you can argue that INSS/FGTS/13 Salary/vacations is something that I received, but there are several extra steps and it is delegated to the government to manage.\n\n# Ok, what else?\n\nQ: \"oh, but I have other benefits in CLT like gym / health insurance\". \nA: there is no magic. If company is paying extra, this money could come direct to my pocket.\n\nQ: \"how about exchange rate fluctuation?\"\nA: do you really think Brazilian real will behave better than any other currency? Just search on google things like `1 BRL in USD` / `1 BRL in EUR` / etc and check the graphic. \n\nQ: \"but if something bad happen? e.g. accident, fired\"\nA: I prefer to contract the insurances myself. I do have my emergency reserve, and unlike the one from the government mine does earn interest.\n\n# Which tool did I use? \n\nBasically [this one](https://utilitarios.grupodpg.com.br/utilitarios/categoria/calculo-facil/775/custo-de-contratao-pj-x-clt-x-autnomo). \n\nhttps://numbr.dev is also great to play with it real time and share.\n\n# Conclusion\n\nI don't like CLT. I don't want CLT. I don't see value to pass ownership of things to government. No reason to pay 27% of taxes if I can pay 7%.\n\nTo be clear, one FAANG / MANGA (Meta / Apple / Netflix / Google / Amazon) offered me to be CLT. MANGA is a dream for almost every developer, but I said no just because I don't see a point in CLT.\n\nAnd if you (LATAM developer) that have the option to choose I really hope you decide by PJ/contractor."},{"slug":"2024-04-18-taskfile","title":"Taskfile - an alternative for Makefiles","summary":"A 5 minutes tutorial","dateString":"2024-04-18","tags":["javascript","typescript","tools","golang"],"content":"\nOk, Make/Makefiles are great. I spoke about then in the [last post](/blog/posts/2024-04-08-makefile).\n\nBut what if:\n\n- I want to break them in different files\n- Use a better syntax (maybe yaml?)\n- Cache the tasks, even the ones that don't generate artifacts (e.g. lint)\n- put tasks and aliases close\n- validate the task execution\n- have global tasks to run in any folder (e.g. backup)\n- dry run\n- watch task\n\n#### Taskfile to rescue\n\nJust need to [install Task](https://taskfile.dev/installation/) (or go-task on [github](https://github.com/go-task/task)).\n\nThe [documentation](https://taskfile.dev/) is pretty simple IMHO, but I want to highlight some things that I do use in daily bases that I think it does a great difference.\n\n## Show me the code\n\nFor this I will use the sample from [previous post](/blog/posts/2024-04-08-makefile) ([makefile here](https://github.com/adamatti/node-sample/blob/main/Makefile))\n\n```yaml\n# yaml-language-server: $schema=https://json.schemastore.org/taskfile.json\n---\nversion: '3'\n\nenv:\n  DATABASE_URL: postgres://postgres:sample@localhost:5432/sample\n\nincludes:\n  docker-compose:\n    aliases: [dc]\n    taskfile: ./Taskfile-docker-compose.yaml\n  prisma:\n    aliases: [p]\n    taskfile: ./Taskfile-prisma.yaml\n\ntasks:\n  default:\n    desc: Show help\n    aliases: [h]\n    silent: true\n    cmds:\n      - task -l --sort alphanumeric\n\n  clean:\n    desc: Remove node modules\n    aliases: [c]\n    cmds:\n      - rm -rf node-modules\n\n  install:\n    desc: Install dependencies\n    aliases: [i]\n    run: once\n    cmds:\n      - npm install\n    preconditions:\n      - test -f package.json\n      - test -f package-lock.json\n    sources:\n      - package.json\n      - package-lock.json\n    status:\n      - test -d node_modules\n\n  run-only:\n    aliases: [ro]\n    interactive: true\n    ignore_error: true\n    dotenv: ['.env']\n    cmds:\n      - task: install\n      - task: prisma:generate\n      - npx --yes esno src/index.ts\n\n  run:\n    desc: Run the project\n    aliases: [r]\n    cmds:\n      - task: docker-compose:up\n      - task: prisma:push\n      - task: run-only\n```\n\nThere are a lot of things going on here, so trying to explain some things:\n\n1. The first line is just for auto complete on IDEs (like vscode, zed)\n2. We can define global env vars in the script itself (e.g. `DATABASE_URL`)\n3. We can [import](https://taskfile.dev/usage/#including-other-taskfiles) part of the scripts. You just need to have your global ones (e.g. terraform, docker-compose, prisma, git, etc). It does work with remote files.\n4. You can expose/hide tasks with [internal flag](https://taskfile.dev/usage/#internal-tasks)\n\n## Now the best part - cache\n\nPay a close look on the install task.\n\n1. it only runs if `package.json` and `package-lock.json` are present ([programatic checks](https://taskfile.dev/usage/#using-programmatic-checks-to-cancel-the-execution-of-a-task-and-its-dependencies))\n2. [Prevent unnecessary work](https://taskfile.dev/usage/#prevent-unnecessary-work): it caches the execution using the `source` attribute.\n3. at the end it checks if the `node_modules` folder was created.\n4. Even caching based on the `source`, if you remove the `node_modules` folder (check) it will run again.\n\nSo, you just need to run your daily tasks (e.g. tests, lints, run local) and the script itself will detect what is pending and run it if needed.\n\nNo more crazy issues that you forgot to update a dependency or database change.\n\n## Ok, show me a normal day of work\n\nAt the first time, you just need to run `task r` to run the app. It will install dependencies, start database, apply db changes and run the app.\n\nBut what happen if someone changes a dependency? No problem. Taskfile will detect and will run `npm install` again.\n\nBut if someone just changes the db schema? No problem. It will generate the classes again.\n\nIf nothing changes, it will just run the app (ok, the docker part is not optimized, but you got the idea).\n\nIf need to stop the app and run again you can go direct to `task ro` (ro = run only).\n\n## Full Project\n\nAs always, the full sample is available on [github](https://github.com/adamatti/node-sample).\n\n## Closing thoughts\n\nNow go to the [documentation](https://taskfile.dev/usage/).\n\nRemove commands from `README.md` files and confluence/sharepoint. Also remove it from anemic `package.json` 😛\n\nMy global taskfiles are shared [here](https://github.com/adamatti/dotfiles/tree/main/taskfile) for reference.\n\nMy backup scripts using rsync are also on taskfiles, but this is a subject for another post.\n"},{"slug":"2024-04-08-makefile","title":"Makefiles - How to use them for automations","summary":"A 5 minutes tutorial","dateString":"2024-04-08","tags":["javascript","typescript","tools"],"content":"\nImagine the follow scenario: you do have a node api with typescript, that uses a database (postgres in this sample) and an orm ([prisma](https://www.prisma.io/)). Every time someone in the team adds a new dependency, you need to run `npm install`. \n\nDatabase changes? You need to generate the classes again with `npm run prisma generate`. Oh, you also need to apply the changes with `npm run prisma db push` (note: a real world project would use migrations files, so `npm run prisma migrate dev`).\n\nThen you moved to another service. Then moved back... oh, now need to start database again with `docker-compose up -d`. And so one... \n\nThe steps are documented in a readme file. Or you can get it from `package.json` -> `scripts`, but there is no comments there or command order/dependence. \n\nWhat do you do? \n\n#### Makefile to rescue\n\nSo, Make is a build automation tool (thanks [wikipedia](https://en.wikipedia.org/wiki/Make_(software)), and it is available by default in all unix systems.\n\nWith that you can:\n- create goals (tasks)\n- create multi line commands\n- use vars\n- use conditions\n- create aliases for the commands\n- map task dependencies\n- avoid re-running a task if artifact is already created (e.g. build). \"Kind\" of a cache (strong quotes here)\n\n#### So, show me a sample!\n\nSure... check this one (full project [here](https://github.com/adamatti/node-sample)):\n\n```makefile\ndefault:\n\t@echo \"Please specify a target to run\"\n\nclean:\n\trm -rf node_modules\n\nnode_modules:\n\tnpm install\n\ndocker-compose-up:\n\tdocker-compose up -d\n\nprisma-db-push:\n\tnpx --yes wait-on tcp:5432 && \\\n\tDATABASE_URL=postgres://postgres:sample@localhost:5432/sample npm run prisma db push\n\nprisma-generate:\n\tnpm run prisma generate\n\nrun-only:\n\tDATABASE_URL=postgres://postgres:sample@localhost:5432/sample \\\n\tnpx --yes esno src/index.ts\n\nrun: docker-compose-up prisma-generate prisma-db-push run-only\n\nformat:\n\tnpm run prisma format\n\tnpx --yes biome format --write ./src\n\n# Aliases\ninstall: node_modules\ndcu: docker-compose-up\npdp: prisma-db-push\npg: prisma-generate\nr: run\nro: run-only\nfirst: clean install run\nfresh: first\nf: fresh\n```\n\nAs you can see, a simple task is just \n\n```makefile\ntaskname: dependency1 dependency2\n    my list of commands\n    second command here\n    etc\n```\n\nwith the sample provided, I can install dependencies with `make node_modules`. \n\nIf you run it again, it will do nothing as the `node_modules` folder is already present (task name = folder name).\n\nIf I want to run my app the first time, I just need `make fresh`, and it will:\n- install dependencies\n- start database\n- generate orm classes\n- update database\n- run the app\n\nIf I want to run the app again, I don't need the full steps. I can go direct to `make run-only`.\n\n#### Ok, I am lazy than that\n\nWith dependencies, you can create aliases. e.g.\n\n```makefile\nr: run\nro: run-only\n```\n\nNow I just need `make r` to run my app. Or `make ro` to run-only.\nNote: I am lazier than that, I also [have an alias](https://github.com/adamatti/dotfiles/blob/bb23c786a3181b977874efe83530b65ec5de804a/zsh/aliases.zsh#L3) to run `make` with `m` only 😛\n\n#### How about the default task?\n\nIt uses the first task. Or the one defined on `.DEFAULT_GOAL := help` (add it as one of the first lines).\n\n#### Ok, but how about documentation\n\nThere is a [trick](https://marmelab.com/blog/2016/02/29/auto-documented-makefile.html) for that - just add those lines in the beginning of the file:\n\n```makefile\n.PHONY: help\n\nhelp:\n\t@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = \":.*?## \"}; {printf \"\\033[36m%-30s\\033[0m %s\\n\", $$1, $$2}'\n```\n\n...plus, `## comment` in the tasks you want comments. E.g.\n\n```makefile\nclean: ## remove dependencies\n\trm -rf node_modules\n\nprisma-generate: ## generate prisma classes\n\tnpm run prisma generate\n```\n\nNow you just need to run `make` or `make help` to see all tasks and comments, sorted by task name, e.g.\n\n```shell\n> make help\nclean                          remove dependencies\ndocker-compose-up              start dependencies\nfirst                          first execution\nformat                         format code\nfresh                          fresh execution\ninstall                        install dependencies\nprisma-db-push                 push prisma schema to database\nprisma-generate                generate prisma classes\nrun-only                       run the project\nrun                            run the project + dependencies\n```\n\n#### Advanced\n\n- How to hide the command from output? Just add `@` in the front of the command.\n- call an existing task in the middle/end of my commands? `$(MAKE) your task`\n- cache task? the task should match with the output folder or file name\n\n#### Show me the full project\n\nIt is [here](https://github.com/adamatti/node-sample), and the makefile is [here](https://github.com/adamatti/node-sample/blob/main/Makefile)\n\n#### Why post about makefile?\n\nBecause this is the [most watched video on my channel](https://www.youtube.com/watch?v=h4aV3C6BRDQ). And a lot of developers still adding commands on readme files on partially on package.json. We developers should automate things, even our daily tasks."},{"slug":"2024-04-05-vinejs","title":"Vinejs - js validation lib","summary":"An alternative to zod","dateString":"2024-04-05","tags":["javascript","typescript"],"content":"\nJust saw this new lib today - [Vinejs](https://vinejs.dev/). It called my attention as it is very similar to [zod](https://zod.dev/), but seems to be faster. Definitely I will consider it for my next pet projects.\n\n#### Basic Example\n\n```typescript\nimport vine from '@vinejs/vine'\n\nconst schema = vine.object({\n  email: vine.string().email(),\n  password: vine\n    .string()\n    .minLength(8)\n    .maxLength(32)\n    .confirmed()\n})\n\nconst data = getDataToValidate()\nawait vine.validate({ schema, data })\n```\n\n#### Benchmarks\n\n<div style=\"align:center\">\n  ![Benchmarks](/assets/posts/2024-04-05-vinejs/benchmark.jpg)\n</div>"},{"slug":"2023-12-30-tdc","title":"TDC - API Track","summary":null,"dateString":"2023-12-30","tags":["events","tdc"],"content":"\n<div style=\"align:center\">\n  ![Caricatura](/assets/posts/2023-12-30-tdc/caricatura.png)\n</div>\n\nOne more year I participated on [The Dev Conf](https://thedevconf.com/tdc/2023/future/trilha-api) as a track coordinator, API this time. One more row to [my profile there](https://thedevconf.com/palestrante/MarceloAdamatti).\n\nWe had talks about:\n\n- Legacy of Microservices\n- REST controllers\n- Governance\n- Contract tests\n- Open Telemetry\n- API Gateway\n- GraphQL\n\nWe had great feedback score from the audience (lowest avg vote was 4.3 of 5).\n\nThe photos are available [here](https://thedevconf.com/tdc/2022/future/fotos).\n\n#### To the speaker and track coordinators\n\nThanks a lot for all the efforts, dedication, time expended... We had a great event, it wouldn't be possible without that.\n\n#### To event coordinators\n\nThanks for pick me, it is a recognition of my work.\n\n#### To the audience\n\nI hope everyone enjoined as the feedback scored said. TDC is a community event, we did the talk selection based on what we thought would be the best for the audience. It is not easy to pick 7 from a good amount of submissions.\n\n#### To myself in future\n\nIt is a lot of work/coordination prior the event: people will cancel, have problems with the time of the slot, etc. But during and in the pass, the event is a great experience."},{"slug":"2023-07-04-happiness","title":"What happens when developers are (un)happy","summary":"Great article/reflection about happiness","dateString":"2023-07-04","tags":["happiness"],"content":"\nThis post is more a reminder to myself, as I keep searching about happiness formulas and reasons for unhappiness / poison behaviours. \n\nI just watched the video bellow (`O que acontece quando pessoas desenvolvedoras de software ficam (in) felizes?`), based on [this article](https://www.sciencedirect.com/science/article/pii/S0164121218300323?via%3Dihub).\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/1LSqxCZ-83U\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen style=\"text-align: center\"></iframe>\n\nTake a look on the consequences of unhappiness and happiness.\n\n![Consequences of unhappiness](/assets/posts/2023-07-04-happiness/unhappy.jpg)\n\n![Consequences of happiness](/assets/posts/2023-07-04-happiness/happy.jpg)\n\nDevelopment goes beyond code, product and methodologies. \n\nDifferent methodologies (e.g. scrum/kanban) will not address unhappiness issues."},{"slug":"2023-03-27-pyramid-of-needs","title":"The Pyramid of Needs","summary":"My insights on that topic","dateString":"2023-03-27","tags":["leadership","grow"],"content":"\nToday I received the [Refactoring newsletter](https://refactoring.fm/p/on-design-sweet-spot-threat-modeling) (which strongly recommend to sign in), and one of the sections caused me some reflections, the \"Pyramid of Needs\".\n\nWhile I had previously heard of [Maslow's hierarchy of needs](https://en.wikipedia.org/wiki/Maslow%27s_hierarchy_of_needs), this pyramid is specifically relevant to one's career.\n\nThis is the image from the post:\n\n![Pyramid of Needs](/assets/posts/pyramid-of-needs.webp)\n\n... and I strongly recommend you (reader) to go to the [original post]((https://refactoring.fm/p/on-design-sweet-spot-threat-modeling) ) to check all the details.\n\n- The majority of the professional that I knew were more interested (or stuck) in the *individual* layer. \n- The best ones (that I know, IMHO) passed the *Teamwork* layer.\n- I was 200% in the item *I have opportunities to learn and grow*. But it doesn't work if the *teamwork* layer (and the ones bellow) aren't fulfilled."},{"slug":"2023-03-16-quarkus","title":"Quarkus - a new try on native images","summary":"A blazing fast spring competitor","dateString":"2023-03-16","tags":["quarkus","java","jvm","gradle"],"content":"\nThree years ago I did some tests using [quarkus](https://quarkus.io/), to use on some microservices / pet projects. The commands to make it run using native binary are on this [gist](https://gist.github.com/adamatti/4633a7559647aaf779d60e3aad543b6b).\n\nToday I tried it again, just registering here my steps:\n\n### 1. Install quarkus\n\nI am using [sdkman](https://sdkman.io/) for it - it is a java version manager, similar to [fnm](https://github.com/Schniz/fnm) (for node).\n\nIt is easy as `sdk install quarkus`.\n\n### 2. Create a project\n\nJust need to run:\n\n```shell\nquarkus create app adamatti.github.io:learn-quarkus --extension='resteasy-reactive' --gradle\n```\n\nWhere `learn-quarkus` is the project name and `adamatti.github.io` is the main package name.\n\nYes, I decided to use [gradle](https://gradle.org/) instead of [maven](https://maven.apache.org/). Not willing to use XML in 2023 :-p\n\nThen I added this extension to build inside a docker container: \n\n```shell\ngradle addExtension --extensions=quarkus-container-image-docker\n```\n\n### 3. Run\n\n`./gradlew quarkusDev`. I can't deny, it is amazing be able to change source files without the need to stop/start the application multiple times\n\n### 4. Build native\n\n```shell\n./gradlew build -Dquarkus.package.type=native -Dquarkus.native.container-build=true\n```\n\nWith this, you don't need to have [graalvm](https://www.graalvm.org/) on local machine.\n\nThe binary file was created on `build` folder as `learn-quarkus-1.0.0-SNAPSHOT-runner`. It took ~4mins on my machine (Apple M1), 40mb is the size.\n\n### 5. Run the binary in a docker container\n\n... just to make sure it doesn't need any of the dependencies in my local machine (e.g. java) and simulate a real deploy.\n\n```shell\ndocker run --rm -it \\\n    -p \"8080:8080\" \\\n    -v ${PWD}/build/learn-quarkus-1.0.0-SNAPSHOT-runner:/app \\\n    centos \\\n    /app -Dquarkus.http.host=0.0.0.0\n```\n\n### Extra - version configuration\n\nJust created a `.sdkmanrc` file to make sure I would use the same versions in the future: \n\n```shell\n# Enable auto-env through the sdkman_auto_env config\n# Add key=value pairs of SDKs to use below\njava=11.0.11.9.1-amzn\ngradle=7.5.1\nquarkus=3.0.0.Alpha6\n```\n\n### Conclusion\n\n1. Quarkus is really fast, I would love to work with it in production\n2. Really loved the way the resources/controllers are created, e.g. \n\n```java\npackage adamatti.github.io;\n\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\n\n@Path(\"/hello\")\npublic class GreetingResource {\n\n    @GET\n    @Produces(MediaType.TEXT_PLAIN)\n    public String hello() {\n        return \"Hello from RESTEasy Reactive\";\n    }\n}\n```\n\n3. Loved the tests created with Gherkin syntax: \n\n```java\npackage adamatti.github.io;\n\nimport io.quarkus.test.junit.QuarkusTest;\nimport org.junit.jupiter.api.Test;\n\nimport static io.restassured.RestAssured.given;\nimport static org.hamcrest.CoreMatchers.is;\n\n@QuarkusTest\npublic class GreetingResourceTest {\n\n    @Test\n    public void testHelloEndpoint() {\n        given()\n          .when().get(\"/hello\")\n          .then()\n             .statusCode(200)\n             .body(is(\"Hello from RESTEasy Reactive\"));\n    }\n\n}\n```\n\n4. It also create tests for the native version (powered by the additional annotation):\n\n```java\npackage adamatti.github.io;\n\nimport io.quarkus.test.junit.QuarkusIntegrationTest;\n\n@QuarkusIntegrationTest\npublic class GreetingResourceIT extends GreetingResourceTest {\n    // Execute the same tests but in packaged mode.\n}\n```\n\n5. [Micronault](https://micronaut.io/) is still my preferred [spring](https://spring.io/) replacement, but this is a subject for another topic.\n\nI still curious about Quarkus usage, let's keep watching and see how does it goes."},{"slug":"2023-03-15-chatgpt-full-potential","title":"How to unlock ChatGPT full potential","summary":"a great prompt for better results","dateString":"2023-03-15","tags":["chatgpt"],"content":"\nJust received it on [this newsletter](https://atalho.substack.com/p/597-o-prompt-dos-prompts-como-desbloquear), it is helping me a lot for better prompts:\n\n```\nI want you to become my prompt engineer. Your goal is to help me craft the best possible prompt for my needs. The prompt will be used by you, ChatGPT. You will follow the following process:\n\n1. Your first response will be to ask me what the prompt should be about. I will provide my answer, but we will need to improve it through continual iterations by going through the next steps.\n\n2. Based on my input, you will generate 2 sections. a) Revised prompt (provide your rewritten prompt. it should be clear, concise, and easily understood by you), b) Questions (ask any relevant questions pertaining to what additional information is needed from me to improve the prompt).\n\n3. We will continue this iterative process with me providing additional information to you and you updating the prompt in the Revised prompt section until I say we are done.\n```\n\nHope it does help you too. \n\nGo to chat gpt [here](https://chat.openai.com/chat)"},{"slug":"2023-02-23-first","title":"First Blog post","summary":"Just a test post","dateString":"2023-02-23","tags":["test"],"content":"First blog post! \n\nThis is more a test to make it work. Thanks [@pixegami](https://www.youtube.com/watch?v=Hiabp1GY8fA) and [@Traversy Media\n](https://www.youtube.com/watch?v=MrjeefD8sac) for the great tutorials\n\nMy main goal here is to start producing content in English about programing languages, libraries, software development metodologies, leadership, culture, product, business... let's see how it goes, wish me lucky."}]},"__N_SSG":true}