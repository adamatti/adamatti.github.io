{"pageProps":{"slug":"typescript","jobs":[],"posts":[{"slug":"2024-04-08-makefile","title":"Makefiles - How to use them for automations","summary":"A 5 minutes tutorial","dateString":"2024-04-08","tags":["javascript","typescript","tools"],"content":"\nImagine the follow scenario: you do have a node api with typescript, that uses a database (postgres in this sample) and an orm ([prisma](https://www.prisma.io/)). Every time someone in the team adds a new dependency, you need to run `npm install`. \n\nDatabase changes? You need to generate the classes again with `npm run prisma generate`. Oh, you also need to apply the changes with `npm run prisma db push` (note: a real world project would use migrations files, so `npm run prisma migrate dev`).\n\nThen you moved to another service. Then moved back... oh, now need to start database again with `docker-compose up -d`. And so one... \n\nThe steps are documented in a readme file. Or you can get it from `package.json` -> `scripts`, but there is no comments there or command order/dependence. \n\nWhat do you do? \n\n#### Makefile to rescue\n\nSo, Make is a build automation tool (thanks [wikipedia](https://en.wikipedia.org/wiki/Make_(software)), and it is available by default in all unix systems.\n\nWith that you can:\n- create goals (tasks)\n- create multi line commands\n- use vars\n- use conditions\n- create aliases for the commands\n- map task dependencies\n- avoid re-running a task if artifact is already created (e.g. build). \"Kind\" of a cache (strong quotes here)\n\n#### So, show me a sample!\n\nSure... check this one (full project [here](https://github.com/adamatti/node-sample)):\n\n```makefile\ndefault:\n\t@echo \"Please specify a target to run\"\n\nclean:\n\trm -rf node_modules\n\nnode_modules:\n\tnpm install\n\ndocker-compose-up:\n\tdocker-compose up -d\n\nprisma-db-push:\n\tnpx --yes wait-on tcp:5432 && \\\n\tDATABASE_URL=postgres://postgres:sample@localhost:5432/sample npm run prisma db push\n\nprisma-generate:\n\tnpm run prisma generate\n\nrun-only:\n\tDATABASE_URL=postgres://postgres:sample@localhost:5432/sample \\\n\tnpx --yes esno src/index.ts\n\nrun: docker-compose-up prisma-generate prisma-db-push run-only\n\nformat:\n\tnpm run prisma format\n\tnpx --yes biome format --write ./src\n\n# Aliases\ninstall: node_modules\ndcu: docker-compose-up\npdp: prisma-db-push\npg: prisma-generate\nr: run\nro: run-only\nfirst: clean install run\nfresh: first\nf: fresh\n```\n\nAs you can see, a simple task is just \n\n```makefile\ntaskname: dependency1 dependency2\n    my list of commands\n    second command here\n    etc\n```\n\nwith the sample provided, I can install dependencies with `make node_modules`. \n\nIf you run it again, it will do nothing as the `node_modules` folder is already present (task name = folder name).\n\nIf I want to run my app the first time, I just need `make fresh`, and it will:\n- install dependencies\n- start database\n- generate orm classes\n- update database\n- run the app\n\nIf I want to run the app again, I don't need the full steps. I can go direct to `make run-only`.\n\n#### Ok, I am lazy than that\n\nWith dependencies, you can create aliases. e.g.\n\n```makefile\nr: run\nro: run-only\n```\n\nNow I just need `make r` to run my app. Or `make ro` to run-only.\nNote: I am lazier than that, I also [have an alias](https://github.com/adamatti/dotfiles/blob/bb23c786a3181b977874efe83530b65ec5de804a/zsh/aliases.zsh#L3) to run `make` with `m` only ðŸ˜›\n\n#### How about the default task?\n\nIt uses the first task. Or the one defined on `.DEFAULT_GOAL := help` (add it as one of the first lines).\n\n#### Ok, but how about documentation\n\nThere is a [trick](https://marmelab.com/blog/2016/02/29/auto-documented-makefile.html) for that - just add those lines in the beginning of the file:\n\n```makefile\n.PHONY: help\n\nhelp:\n\t@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = \":.*?## \"}; {printf \"\\033[36m%-30s\\033[0m %s\\n\", $$1, $$2}'\n```\n\n...plus, `## comment` in the tasks you want comments. E.g.\n\n```makefile\nclean: ## remove dependencies\n\trm -rf node_modules\n\nprisma-generate: ## generate prisma classes\n\tnpm run prisma generate\n```\n\nNow you just need to run `make` or `make help` to see all tasks and comments, sorted by task name, e.g.\n\n```shell\n> make help\nclean                          remove dependencies\ndocker-compose-up              start dependencies\nfirst                          first execution\nformat                         format code\nfresh                          fresh execution\ninstall                        install dependencies\nprisma-db-push                 push prisma schema to database\nprisma-generate                generate prisma classes\nrun-only                       run the project\nrun                            run the project + dependencies\n```\n\n#### Show me the full project\n\nIt is [here](https://github.com/adamatti/node-sample), and the makefile is [here](https://github.com/adamatti/node-sample/blob/main/Makefile)\n\n#### Why post about makefile?\n\nBecause this is the [most watched video on my channel](https://www.youtube.com/watch?v=h4aV3C6BRDQ). And a lot of developers still adding commands on readme files on partially on package.json. We developers should automate things, even our daily tasks."},{"slug":"2024-04-05-vinejs","title":"Vinejs - js validation lib","summary":"An alternative to zod","dateString":"2024-04-05","tags":["javascript","typescript"],"content":"\nJust saw this new lib today - [Vinejs](https://vinejs.dev/). It called my attention as it is very similar to [zod](https://zod.dev/), but seems to be faster. Definitely I will consider it for my next pet projects.\n\n#### Basic Example\n\n```typescript\nimport vine from '@vinejs/vine'\n\nconst schema = vine.object({\n  email: vine.string().email(),\n  password: vine\n    .string()\n    .minLength(8)\n    .maxLength(32)\n    .confirmed()\n})\n\nconst data = getDataToValidate()\nawait vine.validate({ schema, data })\n```\n\n#### Benchmarks\n\n<div style=\"align:center\">\n  ![Benchmarks](/assets/posts/2024-04-05-vinejs/benchmark.jpg)\n</div>"}],"events":[],"technologies":[{"id":"1","name":"javascript","color":"amber-300","image":"javascript.jpeg","tags":["language","love","js","typescript"],"since":"2015-09-01T00:00:00.000Z"},{"id":"2","name":"typescript","color":"sky-600","image":"typescript.jpeg","tags":["language","love","javascript","js"],"since":"2017-04-01T00:00:00.000Z"},{"id":"24","name":"Graphql","color":"pink-500","image":"graphql.png","tags":["frontend","typescript","javascript","js"],"since":"2015-09-01T00:00:00.000Z"},{"id":"26","name":"Nest.js","color":"rose-600","image":"nestjs.jpeg","tags":["framework","javascript","js","typescript"],"since":"2022-03-01T00:00:00.000Z"},{"id":"27","name":"Next.js","color":"zinc-700","image":"nextjs.png","tags":["framework","javascript","js","typescript"],"since":"2021-01-01T00:00:00.000Z"},{"id":"28","name":"React","color":"cyan-300","image":"react.png","tags":["frontend","javascript","js","typescript"],"since":"2021-01-01T00:00:00.000Z"}],"videos":[],"petProjects":[{"id":"635826827","name":"learn-fireblocks","url":"https://github.com/adamatti/learn-fireblocks","description":"Pet project to play with fireblocks","createdAt":"2023-05-03T14:33:57Z","language":"TypeScript","topics":["crypto","fireblocks","javascript","typescript"]},{"id":"632123371","name":"heap-tree-react","url":"https://github.com/adamatti/heap-tree-react","description":null,"createdAt":"2023-04-24T18:59:01Z","language":"TypeScript","topics":["heap","reactjs","vitejs"]},{"id":"602808315","name":"adamatti.github.io","url":"https://github.com/adamatti/adamatti.github.io","description":"Create a new version of https://adamatti.github.io, now with react","createdAt":"2023-02-17T01:27:04Z","language":"TypeScript","topics":["blog","graphql","javascript","js","react","tailwind","typescript"]},{"id":"597909775","name":"superapp","url":"https://github.com/adamatti/superapp","description":"Merging pet projects and optimizing resources","createdAt":"2023-02-06T01:01:02Z","language":"TypeScript","topics":["javascript","js","nestjs","react","typescript"]},{"id":"596238101","name":"node-backup","url":"https://github.com/adamatti/node-backup","description":"Pet project to backup files on dropbox","createdAt":"2023-02-01T18:58:35Z","language":"TypeScript","topics":["backup","dropbox","typescript"]},{"id":"557864566","name":"mysql_to_redshift","url":"https://github.com/adamatti/mysql_to_redshift","description":"Small script to load mysql data to redshift","createdAt":"2022-10-26T12:59:09Z","language":"TypeScript","topics":["javascript","js","mysql","nodejs","redshift","typescript"]},{"id":"419130877","name":"wiki-nextjs","url":"https://github.com/adamatti/wiki-nextjs","description":"Pet project to learn nextjs","createdAt":"2021-10-20T00:17:33Z","language":"TypeScript","topics":["javascript","js","nextjs","typescript","wiki"]},{"id":"404828395","name":"adamatti-npm-libs","url":"https://github.com/adamatti/adamatti-npm-libs","description":"Pet project to test lerna / husky / circle ci / npm publish.","createdAt":"2021-09-09T18:24:32Z","language":"Makefile","topics":["javascript","js","typescript"]},{"id":"171135990","name":"json-server-api","url":"https://github.com/adamatti/json-server-api","description":"Based on json-server, but with plans to expand","createdAt":"2019-02-17T15:08:42Z","language":"TypeScript","topics":["graphql","javascript","js","nodejs","typescript"]},{"id":"155613119","name":"LearnSonar","url":"https://github.com/adamatti/LearnSonar","description":"Pet project to show how to publish metrics to sonar","createdAt":"2018-10-31T19:35:00Z","language":"Java","topics":["gradle","groovy","java","javascript","js","jvm","nodejs","sonar","sonarqube","typescript"]}]},"__N_SSG":true}