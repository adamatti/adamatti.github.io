{"pageProps":{"tag":"jvm","posts":[{"slug":"2023-03-16-quarkus","title":"Quarkus - a new try on native images","summary":"A blazing fast spring competitor","dateString":"2023-03-16","tags":["quarkus","java","jvm","gradle"],"content":"\nThree years ago I did some tests using [quarkus](https://quarkus.io/), to use on some microservices / pet projects. The commands to make it run using native binary are on this [gist](https://gist.github.com/adamatti/4633a7559647aaf779d60e3aad543b6b).\n\nToday I tried it again, just registering here my steps:\n\n### 1. Install quarkus\n\nI am using [sdkman](https://sdkman.io/) for it - it is a java version manager, similar to [fnm](https://github.com/Schniz/fnm) (for node).\n\nIt is easy as `sdk install quarkus`.\n\n### 2. Create a project\n\nJust need to run:\n\n```shell\nquarkus create app adamatti.github.io:learn-quarkus --extension='resteasy-reactive' --gradle\n```\n\nWhere `learn-quarkus` is the project name and `adamatti.github.io` is the main package name.\n\nYes, I decided to use [gradle](https://gradle.org/) instead of [maven](https://maven.apache.org/). Not willing to use XML in 2023 :-p\n\nThen I added this extension to build inside a docker container: \n\n```shell\ngradle addExtension --extensions=quarkus-container-image-docker\n```\n\n### 3. Run\n\n`./gradlew quarkusDev`. I can't deny, it is amazing be able to change source files without the need to stop/start the application multiple times\n\n### 4. Build native\n\n```shell\n./gradlew build -Dquarkus.package.type=native -Dquarkus.native.container-build=true\n```\n\nWith this, you don't need to have [graalvm](https://www.graalvm.org/) on local machine.\n\nThe binary file was created on `build` folder as `learn-quarkus-1.0.0-SNAPSHOT-runner`. It took ~4mins on my machine (Apple M1), 40mb is the size.\n\n### 5. Run the binary in a docker container\n\n... just to make sure it doesn't need any of the dependencies in my local machine (e.g. java) and simulate a real deploy.\n\n```shell\ndocker run --rm -it \\\n    -p \"8080:8080\" \\\n    -v ${PWD}/build/learn-quarkus-1.0.0-SNAPSHOT-runner:/app \\\n    centos \\\n    /app -Dquarkus.http.host=0.0.0.0\n```\n\n### Extra - version configuration\n\nJust created a `.sdkmanrc` file to make sure I would use the same versions in the future: \n\n```shell\n# Enable auto-env through the sdkman_auto_env config\n# Add key=value pairs of SDKs to use below\njava=11.0.11.9.1-amzn\ngradle=7.5.1\nquarkus=3.0.0.Alpha6\n```\n\n### Conclusion\n\n1. Quarkus is really fast, I would love to work with it in production\n2. Really loved the way the resources/controllers are created, e.g. \n\n```java\npackage adamatti.github.io;\n\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\n\n@Path(\"/hello\")\npublic class GreetingResource {\n\n    @GET\n    @Produces(MediaType.TEXT_PLAIN)\n    public String hello() {\n        return \"Hello from RESTEasy Reactive\";\n    }\n}\n```\n\n3. Loved the tests created with Gherkin syntax: \n\n```java\npackage adamatti.github.io;\n\nimport io.quarkus.test.junit.QuarkusTest;\nimport org.junit.jupiter.api.Test;\n\nimport static io.restassured.RestAssured.given;\nimport static org.hamcrest.CoreMatchers.is;\n\n@QuarkusTest\npublic class GreetingResourceTest {\n\n    @Test\n    public void testHelloEndpoint() {\n        given()\n          .when().get(\"/hello\")\n          .then()\n             .statusCode(200)\n             .body(is(\"Hello from RESTEasy Reactive\"));\n    }\n\n}\n```\n\n4. It also create tests for the native version (powered by the additional annotation):\n\n```java\npackage adamatti.github.io;\n\nimport io.quarkus.test.junit.QuarkusIntegrationTest;\n\n@QuarkusIntegrationTest\npublic class GreetingResourceIT extends GreetingResourceTest {\n    // Execute the same tests but in packaged mode.\n}\n```\n\n5. [Micronault](https://micronaut.io/) is still my prefered [spring](https://spring.io/) replacement, but this is a subject for another topic.\n\nI still curious about Quarkus usage, let's keep watching and see how does it goes."}]},"__N_SSG":true}