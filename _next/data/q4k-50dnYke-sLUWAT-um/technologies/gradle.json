{"pageProps":{"slug":"gradle","jobs":[],"posts":[{"slug":"2023-03-16-quarkus","title":"Quarkus - a new try on native images","summary":"A blazing fast spring competitor","dateString":"2023-03-16","tags":["quarkus","java","jvm","gradle"],"content":"\nThree years ago I did some tests using [quarkus](https://quarkus.io/), to use on some microservices / pet projects. The commands to make it run using native binary are on this [gist](https://gist.github.com/adamatti/4633a7559647aaf779d60e3aad543b6b).\n\nToday I tried it again, just registering here my steps:\n\n### 1. Install quarkus\n\nI am using [sdkman](https://sdkman.io/) for it - it is a java version manager, similar to [fnm](https://github.com/Schniz/fnm) (for node).\n\nIt is easy as `sdk install quarkus`.\n\n### 2. Create a project\n\nJust need to run:\n\n```shell\nquarkus create app adamatti.github.io:learn-quarkus --extension='resteasy-reactive' --gradle\n```\n\nWhere `learn-quarkus` is the project name and `adamatti.github.io` is the main package name.\n\nYes, I decided to use [gradle](https://gradle.org/) instead of [maven](https://maven.apache.org/). Not willing to use XML in 2023 :-p\n\nThen I added this extension to build inside a docker container: \n\n```shell\ngradle addExtension --extensions=quarkus-container-image-docker\n```\n\n### 3. Run\n\n`./gradlew quarkusDev`. I can't deny, it is amazing be able to change source files without the need to stop/start the application multiple times\n\n### 4. Build native\n\n```shell\n./gradlew build -Dquarkus.package.type=native -Dquarkus.native.container-build=true\n```\n\nWith this, you don't need to have [graalvm](https://www.graalvm.org/) on local machine.\n\nThe binary file was created on `build` folder as `learn-quarkus-1.0.0-SNAPSHOT-runner`. It took ~4mins on my machine (Apple M1), 40mb is the size.\n\n### 5. Run the binary in a docker container\n\n... just to make sure it doesn't need any of the dependencies in my local machine (e.g. java) and simulate a real deploy.\n\n```shell\ndocker run --rm -it \\\n    -p \"8080:8080\" \\\n    -v ${PWD}/build/learn-quarkus-1.0.0-SNAPSHOT-runner:/app \\\n    centos \\\n    /app -Dquarkus.http.host=0.0.0.0\n```\n\n### Extra - version configuration\n\nJust created a `.sdkmanrc` file to make sure I would use the same versions in the future: \n\n```shell\n# Enable auto-env through the sdkman_auto_env config\n# Add key=value pairs of SDKs to use below\njava=11.0.11.9.1-amzn\ngradle=7.5.1\nquarkus=3.0.0.Alpha6\n```\n\n### Conclusion\n\n1. Quarkus is really fast, I would love to work with it in production\n2. Really loved the way the resources/controllers are created, e.g. \n\n```java\npackage adamatti.github.io;\n\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\n\n@Path(\"/hello\")\npublic class GreetingResource {\n\n    @GET\n    @Produces(MediaType.TEXT_PLAIN)\n    public String hello() {\n        return \"Hello from RESTEasy Reactive\";\n    }\n}\n```\n\n3. Loved the tests created with Gherkin syntax: \n\n```java\npackage adamatti.github.io;\n\nimport io.quarkus.test.junit.QuarkusTest;\nimport org.junit.jupiter.api.Test;\n\nimport static io.restassured.RestAssured.given;\nimport static org.hamcrest.CoreMatchers.is;\n\n@QuarkusTest\npublic class GreetingResourceTest {\n\n    @Test\n    public void testHelloEndpoint() {\n        given()\n          .when().get(\"/hello\")\n          .then()\n             .statusCode(200)\n             .body(is(\"Hello from RESTEasy Reactive\"));\n    }\n\n}\n```\n\n4. It also create tests for the native version (powered by the additional annotation):\n\n```java\npackage adamatti.github.io;\n\nimport io.quarkus.test.junit.QuarkusIntegrationTest;\n\n@QuarkusIntegrationTest\npublic class GreetingResourceIT extends GreetingResourceTest {\n    // Execute the same tests but in packaged mode.\n}\n```\n\n5. [Micronault](https://micronaut.io/) is still my prefered [spring](https://spring.io/) replacement, but this is a subject for another topic.\n\nI still curious about Quarkus usage, let's keep watching and see how does it goes."}],"events":[],"technologies":[],"videos":[],"petProjects":[{"id":"268682561","name":"PocRuleEngineGroovy","url":"https://github.com/adamatti/PocRuleEngineGroovy","description":"Pet kotlin project to play with groovy \"eval\" (for template and rule engine).","createdAt":"2020-06-02T02:31:19Z","language":"Kotlin","topics":["gradle","java","jvm","kotlin"]},{"id":"250045185","name":"LearnElastic","url":"https://github.com/adamatti/LearnElastic","description":"pet project to play with elastic search","createdAt":"2020-03-25T17:25:48Z","language":"Kotlin","topics":["elasticsearch","gradle","java","jvm","kotlin","spring","spring-boot"]},{"id":"205893871","name":"LearnElepy","url":"https://github.com/adamatti/LearnElepy","description":"Play with Elepy (crud generator)","createdAt":"2019-09-02T16:15:42Z","language":"Java","topics":["gradle","groovy","java","jvm"]},{"id":"191992969","name":"LearnSpringStateMachine","url":"https://github.com/adamatti/LearnSpringStateMachine","description":"Pet project to play with spring state machine","createdAt":"2019-06-14T19:02:24Z","language":"Groovy","topics":["gradle","groovy","java","jvm"]},{"id":"181769985","name":"LearnAws","url":"https://github.com/adamatti/LearnAws","description":"Pet project to play with AWS services with java on local box","createdAt":"2019-04-16T21:28:13Z","language":"Groovy","topics":["aws","docker","gradle","java","jvm"]},{"id":"168721625","name":"docker-multistage-with-test","url":"https://github.com/adamatti/docker-multistage-with-test","description":"Sample using docker multistage build with tests","createdAt":"2019-02-01T15:54:19Z","language":"Makefile","topics":["docker","gradle","groovy","java","jvm","spock-framework"]},{"id":"155613119","name":"LearnSonar","url":"https://github.com/adamatti/LearnSonar","description":"Pet project to show how to publish metrics to sonar","createdAt":"2018-10-31T19:35:00Z","language":"Java","topics":["gradle","groovy","java","javascript","js","jvm","nodejs","sonar","sonarqube","typescript"]},{"id":"137616605","name":"LearnVertx","url":"https://github.com/adamatti/LearnVertx","description":"Pet project to play with Vert.x","createdAt":"2018-06-16T23:26:18Z","language":"Groovy","topics":["docker","docker-compose","gradle","groovy","java","jvm","vertx"]},{"id":"130395158","name":"LearnLightAdmin","url":"https://github.com/adamatti/LearnLightAdmin","description":"Pet project to play with light-admin","createdAt":"2018-04-20T17:41:16Z","language":"Groovy","topics":["crud","gradle","groovy","java","jvm"]},{"id":"129309108","name":"RestAndKotlin","url":"https://github.com/adamatti/RestAndKotlin","description":"Pet project to create a rest api with kotlin","createdAt":"2018-04-12T20:43:31Z","language":"Kotlin","topics":["gradle","java","jvm","kotlin"]},{"id":"123028636","name":"LearnHdfs","url":"https://github.com/adamatti/LearnHdfs","description":"Pet project to show how to list / create files on HDFS using java client (from outside the bigdata cluster)","createdAt":"2018-02-26T20:49:08Z","language":"Groovy","topics":["big","gradle","groovy","hadoop","java","jvm"]},{"id":"97847146","name":"LearnRabbitMQWithJava","url":"https://github.com/adamatti/LearnRabbitMQWithJava","description":"Quick code to play with RabbitMQ","createdAt":"2017-07-20T14:47:56Z","language":"Groovy","topics":["docker","gradle","groovy","java","jvm","rabbitmq"]},{"id":"91116973","name":"JavaAndDocker","url":"https://github.com/adamatti/JavaAndDocker","description":"Pet project to show a good approach for CI with docker/java","createdAt":"2017-05-12T17:59:36Z","language":"Groovy","topics":["docker","gradle","groovy","java","jvm"]},{"id":"86709374","name":"LearnSpock","url":"https://github.com/adamatti/LearnSpock","description":"Pet project to show Spock capabilities","createdAt":"2017-03-30T14:03:26Z","language":"Groovy","topics":["gradle","groovy","jvm","spock","tests"]},{"id":"64940245","name":"RSJUG_03_Ago_16","url":"https://github.com/adamatti/RSJUG_03_Ago_16","description":"Samples used on RSJUG meetup","createdAt":"2016-08-04T14:12:55Z","language":"CSS","topics":["gradle","grails","groovy","java","jvm"]},{"id":"62007194","name":"Wiki","url":"https://github.com/adamatti/Wiki","description":"Wiki implementation","createdAt":"2016-06-26T20:33:09Z","language":"Groovy","topics":["docker","gradle","groovy","heroku","java","jvm"]},{"id":"59327892","name":"LearnNeo4j","url":"https://github.com/adamatti/LearnNeo4j","description":"Pet project to learn Neo4j","createdAt":"2016-05-20T21:38:11Z","language":"Groovy","topics":["database","gradle","graphos","groovy","java","jvm","neo4j"]},{"id":"59245426","name":"LearnRxGroovy","url":"https://github.com/adamatti/LearnRxGroovy","description":"Pet project to play with Rx / Promises / Futures","createdAt":"2016-05-19T21:55:30Z","language":"Groovy","topics":["gradle","groovy","java","jvm"]},{"id":"56510438","name":"LearnJavaMVC","url":"https://github.com/adamatti/LearnJavaMVC","description":"Simple sample using SpringBoot","createdAt":"2016-04-18T13:34:19Z","language":"Java","topics":["gradle","java","jvm","spring","spring-boot"]},{"id":"56273439","name":"LearnJava","url":"https://github.com/adamatti/LearnJava","description":"Sample project for programers that are learning Java","createdAt":"2016-04-14T22:17:58Z","language":"Java","topics":["gradle","java","jvm","maven"]},{"id":"47302326","name":"scala-wiki","url":"https://github.com/adamatti/scala-wiki","description":"Pet project to learn scala","createdAt":"2015-12-03T02:35:51Z","language":"Scala","topics":["gradle","java","jvm","scala","wiki"]},{"id":"11850355","name":"MQServerTest","url":"https://github.com/adamatti/MQServerTest","description":"Quick tests usins FFMQ / ActiveMQ","createdAt":"2013-08-02T18:51:06Z","language":"Java","topics":["gradle","groovy","java","jvm"]}]},"__N_SSG":true}