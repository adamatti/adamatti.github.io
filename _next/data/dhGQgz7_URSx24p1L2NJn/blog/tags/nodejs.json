{"pageProps":{"tag":"nodejs","posts":[{"slug":"2024-11-29-memory-leak","title":"Memory Leak in nodejs/javascript","summary":"Some steps for finding/troubleshooting it","dateString":"2024-11-29","tags":["javascript","nodejs"],"content":"\nRecently I was working on a nodejs/express application to troubleshoot a memory leak. Those were the steps and tools I followed to identify the root cause.\n\n## 1. Reproduce the issue\n\nWe had it in two modules, one a http server and the other a sqs consumer.\n\n#### For the http server\n\nCreated a [k6](https://k6.io/) script for a small performance test:\n\n```javascript\n// script.js\nimport http from 'k6/http';\nimport { check, sleep } from 'k6';\n\nexport default function () {\n  const url = 'http://localhost:3000/test';\n  const res = http.get(url);\n  check(res, { success: (r) => r.status === 200 });\n}\n```\n\nAnd ran it with:\n\n```bash\n# 100 users, 1 hour\nk6 run -u 100 -d 1h script.js\n```\n\n#### For the SQS consumer\n\nBuilt a send command (note: I am using [localstack](https://localstack.cloud/)):\n\n```bash\n# send.sh\nAWS_REGION: \"us-east-1\" aws --endpoint-url=http://localhost:4566\n    sqs send-message\n    --region \"us-east-1\"\n    --queue-url http://localhost:4566/000000000000/queue\n    --message-body '{\"my\": \"message\"}'\n```\n\nand ran with with watch:\n\n```bash\nwatch -n .1 ./send.sh\n```\n\n## 2. Next step, collect the data\n\nInitially I was using node itself for generating it, e.g:\n\n```typescript\nimport v8 from 'node:v8';\n// ...\napp.get('/heapdump', (req, res) => {\n  const fileName = v8.writeHeapSnapshot();\n  res.send({ fileName });\n});\n```\n\nbut we can also use chrome devtools for this (I am using [brave](https://brave.com/), but sames applies):\n\n- run the app with the flag `--inspect`\n- go to `chrome://inspect` / `brave://inspect`, connect\n- go to `Memory` tab, click on `Take Heap Snapshot`\n\n## 3. Analyze the data\n\nThat is the tricky part. Pick the initial snapshot, run the test, pick the final snapshot, and compare.\n\nTry to correlate what you have there with the code. `Allocation on timeline` was also helpful for me.\n\nI strongly recommend take a look on [this presentation](https://www.youtube.com/watch?v=hliOMEQRqf8) for detailed explanation and showcase:\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/hliOMEQRqf8?si=iQ3kfqgyt6Aa_TZU\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n## Next?\n\nNow is the time to apply a fix and re-run the tests.\n\nWe found a lot of [DerivedLogger](https://github.com/winstonjs/winston/blob/c69cdb0cec15a138e0b6e374501e027d1c39606c/lib/winston/create-logger.js#L36) in the memory. It was because the code was calling `winston.createLogger` on each call to enrich the log. We switched to [child](https://github.com/winstonjs/winston#creating-child-loggers) call and problem solved.\n\nThere was no need to use [clinic.js](https://clinicjs.org/) this time.\n\n"},{"slug":"2024-09-10-cloudflare","title":"Cloudflare workers","summary":"Just created my hello world there","dateString":"2024-09-10","tags":["javascript","nodejs","typescript"],"content":"\nI just tried the new cloudflare worker. To create a sample and deploy there, you just need to run one single command:\n\n```\npnpm create cloudflare@latest <project name>\n```\n\n... and of course, a lot of prompts.\n\nI removed some dead code (editor config, prettier), added [biome](https://biomejs.dev/), added a [taskfile](https://taskfile.dev/) (I will forget the commands). Also played with [Hono](https://github.com/honojs/hono) - the web framework [suggested by Cloudflare](https://www.youtube.com/watch?v=H7Qe96fqg1M) and added an AI endpoint.\n\nPretty simple, reminds me the good old days with the free [Heroku](https://www.heroku.com/) tier.\n\nFor sure I will consider it for my pet projects.\n\nMy full code is available on [github](https://github.com/adamatti/learn-cf-worker).\n\nNext, I will try it with [remix](https://remix.run/) for a full stack experience. If I got it right, it should be [super simple](https://hono.dev/examples/with-remix) (or [creating from scratch](https://developers.cloudflare.com/pages/framework-guides/deploy-a-remix-site/)).\n"},{"slug":"2024-09-06-yarn","title":"Yarn Classic","summary":"It is time to move on","dateString":"2024-09-06","tags":["javascript","nodejs"],"content":"\nHey, are you using [yarn](https://classic.yarnpkg.com)? Great tool from [Facebook](https://facebook.com), right?\n\nBut how are you installing it?\n\n`npm install -g yarn`?\n\n### I have a bad news to tell you...\n\n> Yarn has not been distributed on npm since 2019 because of breaking changes that could impact deployments - Google AI\n\nand\n\n> Those versions entered maintenance mode in January 2020 - [yarn classic website](https://classic.yarnpkg.com/lang/en/docs/install)\n\n### So, what should I do?\n\nNeed to consider a better/newer package manager.\n\nIt could be:\n\n- [the new yarn version](https://yarnpkg.com/): as of today (09/06), it is on version 4.4.1\n- [PNPM](https://pnpm.io/), the faster alternative\n- [The NPM itself](https://www.npmjs.com/). The official tool. In 2024, it is faster than yarn classic\n\nThere are a lot of benchmarks out there, like:\n\n- https://romanglushach.medium.com/comparing-npm-yarn-and-pnpm-package-managers-which-one-is-right-for-your-distributed-project-to-4d7de2f0db8e\n- https://refine.dev/blog/pnpm-vs-npm-and-yarn\n- https://www.dhiwise.com/post/pnpm-vs-npm-vs-yarn-which-javascript-package-manager\n\n### How about me?\n\nI am using [PNPM](https://pnpm.io/) in my latest projects, both pet and professional, but already had some issues with it.\n\nIt all case by case, but I strongly recommend to use [PNPM](https://pnpm.io/) for fast local builds and CI.\n"}]},"__N_SSG":true}