{"pageProps":{"tag":"tools","posts":[{"slug":"2024-08-16-aws-granted","title":"AWS Granted","summary":"A tool to easily access AWS roles","dateString":"2024-08-16","tags":["aws","tools"],"content":"\nI was trying to find an alternative to [aws-sso-creds-helper](https://www.npmjs.com/package/aws-sso-creds-helper) since it is archived/deprecated.\n\nThe \"official\" AWS solution is not great either (`aws sso login --profile <profile_name>`).\n\nMy coworkers are using [granted](https://docs.commonfate.io/granted/introduction). \n\nThe [installation](https://docs.commonfate.io/granted/getting-started#installing-the-cli) was simple:\n\n```\nbrew tap common-fate/granted\nbrew install granted\n```\n\nThe [configuration](https://docs.commonfate.io/granted/usage/automatic-config-generation#all-available-aws-sso-roles) was all auto generated:\n\n```\ngranted sso generate --sso-region ap-southeast-2 https://example.awsapps.com/start\n```\n\nAnd to use is basically `assume <role>`. I can even add it to my existing scripts.\n\nWe can also [export it to .env file](https://docs.commonfate.io/granted/usage/dotenv):\n\n```\nassume role-a --env\n```\n\nPlus, [we can access different profiles in different browser tabs](https://docs.commonfate.io/granted/usage/console):\n\n```\nassume -c <role>\n```\n\nSuper useful, highly recommended."},{"slug":"2024-04-18-taskfile","title":"Taskfile - an alternative for Makefiles","summary":"A 5 minutes tutorial","dateString":"2024-04-18","tags":["javascript","typescript","tools"],"content":"\nOk, Make/Makefiles are great. I spoke about then in the [last post](/blog/posts/2024-04-08-makefile).\n\nBut what if:\n\n- I want to break them in different files\n- Use a better syntax (maybe yaml?)\n- Cache the tasks, even the ones that don't generate artifacts (e.g. lint)\n- put tasks and aliases close\n- validate the task execution\n- have global tasks to run in any folder (e.g. backup)\n- dry run\n- watch task\n\n#### Taskfile to rescue\n\nJust need to [install Task](https://taskfile.dev/installation/) (or go-task on [github](https://github.com/go-task/task)).\n\nThe [documentation](https://taskfile.dev/) is pretty simple IMHO, but I want to highlight some things that I do use in daily bases that I think it does a great difference.\n\n## Show me the code\n\nFor this I will use the sample from [previous post](/blog/posts/2024-04-08-makefile) ([makefile here](https://github.com/adamatti/node-sample/blob/main/Makefile))\n\n```yaml\n# yaml-language-server: $schema=https://json.schemastore.org/taskfile.json\n---\nversion: '3'\n\nenv:\n  DATABASE_URL: postgres://postgres:sample@localhost:5432/sample\n\nincludes:\n  docker-compose:\n    aliases: [dc]\n    taskfile: ./Taskfile-docker-compose.yaml\n  prisma:\n    aliases: [p]\n    taskfile: ./Taskfile-prisma.yaml\n\ntasks:\n  default:\n    desc: Show help\n    aliases: [h]\n    silent: true\n    cmds:\n      - task -l --sort alphanumeric\n\n  clean:\n    desc: Remove node modules\n    aliases: [c]\n    cmds:\n      - rm -rf node-modules\n\n  install:\n    desc: Install dependencies\n    aliases: [i]\n    run: once\n    cmds:\n      - npm install\n    preconditions:\n      - test -f package.json\n      - test -f package-lock.json\n    sources:\n      - package.json\n      - package-lock.json\n    status:\n      - test -d node_modules\n\n  run-only:\n    aliases: [ro]\n    interactive: true\n    ignore_error: true\n    dotenv: ['.env']\n    cmds:\n      - task: install\n      - task: prisma:generate\n      - npx --yes esno src/index.ts\n\n  run:\n    desc: Run the project\n    aliases: [r]\n    cmds:\n      - task: docker-compose:up\n      - task: prisma:push\n      - task: run-only\n```\n\nThere are a lot of things going on here, so trying to explain some things:\n\n1. The first line is just for auto complete on IDEs (like vscode, zed)\n2. We can define global env vars in the script itself (e.g. `DATABASE_URL`)\n3. We can [import](https://taskfile.dev/usage/#including-other-taskfiles) part of the scripts. You just need to have your global ones (e.g. terraform, docker-compose, prisma, git, etc). It does work with remote files.\n4. You can expose/hide tasks with [internal flag](https://taskfile.dev/usage/#internal-tasks)\n\n## Now the best part - cache\n\nPay a close look on the install task.\n\n1. it only runs if `package.json` and `package-lock.json` are present ([programatic checks](https://taskfile.dev/usage/#using-programmatic-checks-to-cancel-the-execution-of-a-task-and-its-dependencies))\n2. [Prevent unnecessary work](https://taskfile.dev/usage/#prevent-unnecessary-work): it caches the execution using the `source` attribute.\n3. at the end it checks if the `node_modules` folder was created.\n4. Even caching based on the `source`, if you remove the `node_modules` folder (check) it will run again.\n\nSo, you just need to run your daily tasks (e.g. tests, lints, run local) and the script itself will detect what is pending and run it if needed.\n\nNo more crazy issues that you forgot to update a dependency or database change.\n\n## Ok, show me a normal day of work\n\nAt the first time, you just need to run `task r` to run the app. It will install dependencies, start database, apply db changes and run the app.\n\nBut what happen if someone changes a dependency? No problem. Taskfile will detect and will run `npm install` again.\n\nBut if someone just changes the db schema? No problem. It will generate the classes again.\n\nIf nothing changes, it will just run the app (ok, the docker part is not optimized, but you got the idea).\n\nIf need to stop the app and run again you can go direct to `task ro` (ro = run only).\n\n## Full Project\n\nAs always, the full sample is available on [github](https://github.com/adamatti/node-sample).\n\n## Closing thoughts\n\nNow go to the [documentation](https://taskfile.dev/usage/).\n\nRemove commands from `README.md` files and confluence/sharepoint. Also remove it from anemic `package.json` ðŸ˜›\n\nMy global taskfiles are shared [here](https://github.com/adamatti/dotfiles/tree/main/taskfile) for reference.\n\nMy backup scripts using rsync are also on taskfiles, but this is a subject for another post.\n\n"},{"slug":"2024-04-08-makefile","title":"Makefiles - How to use them for automations","summary":"A 5 minutes tutorial","dateString":"2024-04-08","tags":["javascript","typescript","tools"],"content":"\nImagine the follow scenario: you do have a node api with typescript, that uses a database (postgres in this sample) and an orm ([prisma](https://www.prisma.io/)). Every time someone in the team adds a new dependency, you need to run `npm install`. \n\nDatabase changes? You need to generate the classes again with `npm run prisma generate`. Oh, you also need to apply the changes with `npm run prisma db push` (note: a real world project would use migrations files, so `npm run prisma migrate dev`).\n\nThen you moved to another service. Then moved back... oh, now need to start database again with `docker-compose up -d`. And so one... \n\nThe steps are documented in a readme file. Or you can get it from `package.json` -> `scripts`, but there is no comments there or command order/dependence. \n\nWhat do you do? \n\n#### Makefile to rescue\n\nSo, Make is a build automation tool (thanks [wikipedia](https://en.wikipedia.org/wiki/Make_(software)), and it is available by default in all unix systems.\n\nWith that you can:\n- create goals (tasks)\n- create multi line commands\n- use vars\n- use conditions\n- create aliases for the commands\n- map task dependencies\n- avoid re-running a task if artifact is already created (e.g. build). \"Kind\" of a cache (strong quotes here)\n\n#### So, show me a sample!\n\nSure... check this one (full project [here](https://github.com/adamatti/node-sample)):\n\n```makefile\ndefault:\n\t@echo \"Please specify a target to run\"\n\nclean:\n\trm -rf node_modules\n\nnode_modules:\n\tnpm install\n\ndocker-compose-up:\n\tdocker-compose up -d\n\nprisma-db-push:\n\tnpx --yes wait-on tcp:5432 && \\\n\tDATABASE_URL=postgres://postgres:sample@localhost:5432/sample npm run prisma db push\n\nprisma-generate:\n\tnpm run prisma generate\n\nrun-only:\n\tDATABASE_URL=postgres://postgres:sample@localhost:5432/sample \\\n\tnpx --yes esno src/index.ts\n\nrun: docker-compose-up prisma-generate prisma-db-push run-only\n\nformat:\n\tnpm run prisma format\n\tnpx --yes biome format --write ./src\n\n# Aliases\ninstall: node_modules\ndcu: docker-compose-up\npdp: prisma-db-push\npg: prisma-generate\nr: run\nro: run-only\nfirst: clean install run\nfresh: first\nf: fresh\n```\n\nAs you can see, a simple task is just \n\n```makefile\ntaskname: dependency1 dependency2\n    my list of commands\n    second command here\n    etc\n```\n\nwith the sample provided, I can install dependencies with `make node_modules`. \n\nIf you run it again, it will do nothing as the `node_modules` folder is already present (task name = folder name).\n\nIf I want to run my app the first time, I just need `make fresh`, and it will:\n- install dependencies\n- start database\n- generate orm classes\n- update database\n- run the app\n\nIf I want to run the app again, I don't need the full steps. I can go direct to `make run-only`.\n\n#### Ok, I am lazy than that\n\nWith dependencies, you can create aliases. e.g.\n\n```makefile\nr: run\nro: run-only\n```\n\nNow I just need `make r` to run my app. Or `make ro` to run-only.\nNote: I am lazier than that, I also [have an alias](https://github.com/adamatti/dotfiles/blob/bb23c786a3181b977874efe83530b65ec5de804a/zsh/aliases.zsh#L3) to run `make` with `m` only ðŸ˜›\n\n#### How about the default task?\n\nIt uses the first task. Or the one defined on `.DEFAULT_GOAL := help` (add it as one of the first lines).\n\n#### Ok, but how about documentation\n\nThere is a [trick](https://marmelab.com/blog/2016/02/29/auto-documented-makefile.html) for that - just add those lines in the beginning of the file:\n\n```makefile\n.PHONY: help\n\nhelp:\n\t@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = \":.*?## \"}; {printf \"\\033[36m%-30s\\033[0m %s\\n\", $$1, $$2}'\n```\n\n...plus, `## comment` in the tasks you want comments. E.g.\n\n```makefile\nclean: ## remove dependencies\n\trm -rf node_modules\n\nprisma-generate: ## generate prisma classes\n\tnpm run prisma generate\n```\n\nNow you just need to run `make` or `make help` to see all tasks and comments, sorted by task name, e.g.\n\n```shell\n> make help\nclean                          remove dependencies\ndocker-compose-up              start dependencies\nfirst                          first execution\nformat                         format code\nfresh                          fresh execution\ninstall                        install dependencies\nprisma-db-push                 push prisma schema to database\nprisma-generate                generate prisma classes\nrun-only                       run the project\nrun                            run the project + dependencies\n```\n\n#### Advanced\n\n- How to hide the command from output? Just add `@` in the front of the command.\n- call an existing task in the middle/end of my commands? `$(MAKE) your task`\n- cache task? the task should match with the output folder or file name\n\n#### Show me the full project\n\nIt is [here](https://github.com/adamatti/node-sample), and the makefile is [here](https://github.com/adamatti/node-sample/blob/main/Makefile)\n\n#### Why post about makefile?\n\nBecause this is the [most watched video on my channel](https://www.youtube.com/watch?v=h4aV3C6BRDQ). And a lot of developers still adding commands on readme files on partially on package.json. We developers should automate things, even our daily tasks."}]},"__N_SSG":true}