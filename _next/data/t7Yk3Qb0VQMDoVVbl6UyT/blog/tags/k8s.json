{"pageProps":{"tag":"k8s","posts":[{"slug":"2024-10-28-orbstack","title":"OrbStack","summary":"A docker-desktop replacement","dateString":"2024-10-28","tags":["k8s","kubernetes","docker"],"content":"\nToday I replaced [docker-desktop](https://www.docker.com/products/docker-desktop/) by [OrbStack](https://orbstack.dev/).\n\nLike mentioned by [OrbStack](https://orbstack.dev/):\n\n> OrbStack is the fast, light, and easy way to run Docker containers and Linux. Develop at lightspeed with our Docker Desktop alternative\n\nIt is fully compatible, so no drastic changes.\n\nYou can check the [Docker x OrbStack comparison](https://docs.orbstack.dev/compare/docker-desktop), [Colima x OrbStack](https://docs.orbstack.dev/compare/colima) or [a review from @vortj](https://medium.com/@vortj/orbstack-review-a-game-changer-for-macos-developers-f1931a9db227).\n\nIf you want to fully uninstall docker desktop you can do it [here](https://docs.docker.com/desktop/uninstall/).\n\nIt also provides [kubernetes features](https://docs.orbstack.dev/kubernetes/), but I am using [kind](/blog/posts/2024-10-22-kind) for that.\n"},{"slug":"2024-10-22-kind","title":"Kind - k8s on local","summary":"Useful if you need to test ingress changes like me","dateString":"2024-10-22","tags":["k8s","kubernetes","docker"],"content":"\nOk, let's say you need to test ingress changes and want fast feedback, and don't have access to actual k8s cluster. What would you do?\n\n## Kind for the rescue\n\n[Kind](https://kind.sigs.k8s.io/) is just one of the options. It could be [Minikube](https://minikube.sigs.k8s.io/), Docker Desktop, [K3s](https://github.com/k3s-io/k3s), [Microk8s](https://microk8s.io/), etc\n\nMy goal is just share the steps I did to solve my problem, to others with similar needs and my future self.\n\n## 1. First, a node app\n\nNothing fancy, just the basic to test:\n\na. `server.js`\n\n```javascript\nconst express = require('express');\nconst app = express();\nconst PORT = process.env.PORT ?? 4000;\n\napp.get('/*', (req, res) => {\n  res.json({\n    date: new Date(),\n  });\n});\n\napp.listen(PORT, () => {\n  console.log('Server started');\n});\n```\n\nb. `package.json`\n\n```json\n{\n  \"scripts\": {},\n  \"dependencies\": {\n    \"express\": \"^4.21.1\"\n  }\n}\n```\n\nc. `Dockerfile`\n\n```Dockerfile\nFROM node:23\n\nRUN mkdir -p /app\nWORKDIR /app\n\nCOPY package.json ./\nRUN npm install\n\nCOPY server.js ./\n\nENV PORT=4000\nCMD [\"node\", \"/app/server.js\"]\n```\n\nThen build an image with something like `docker build --quiet . -t app:local`\n\n## 2. The cluster\n\n```bash\n# Install kind on mac\nbrew install kind\n\n# Create the cluster with custom config\ncat <<EOF | kind create cluster --config=-\nkind: Cluster\napiVersion: kind.x-k8s.io/v1alpha4\nnodes:\n- role: control-plane\n  kubeadmConfigPatches:\n  - |\n    kind: InitConfiguration\n    nodeRegistration:\n      kubeletExtraArgs:\n        node-labels: \"ingress-ready=true\"\n  extraPortMappings:\n  - containerPort: 80\n    hostPort: 80\n    protocol: TCP\n  - containerPort: 443\n    hostPort: 443\n    protocol: TCP\nEOF\n\n# Install nginx\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml --context kind-kind\n\n# Make sure it is working\nkubectl wait --namespace ingress-nginx \\\n  --for=condition=ready pod \\\n  --selector=app.kubernetes.io/component=controller \\\n  --timeout=90s --context kind-kind\n```\n\n## 3. deploy the app\n\na. publish image to the cluster:\n\n```bash\nkind load docker-image app:local\n```\n\nb. create pod, service, ingress: just save it in a file (e.g. k8s.yaml)\n\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: node-app\n  labels:\n    app: node-app\nspec:\n  type: ClusterIP\n  ports:\n    - port: 80\n      targetPort:\n      protocol: TCP\n      name: http\n  selector:\n    app: node-app\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: node-app\nspec:\n  replicas: 1\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 2\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: node-app\n  template:\n    metadata:\n      labels:\n        app: node-app\n    spec:\n      serviceAccountName: default\n      securityContext: null\n      containers:\n        - name: node-app\n          image: 'app:local'\n          env:\n            - name: PORT\n              value: '80'\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: node-app\n  annotations:\n    kubernetes.io/ingress.class: nginx\n\nspec:\n  rules:\n    - host: 'node-app.com'\n      http:\n        paths:\n          - backend:\n              service:\n                name: node-app\n                port:\n                  number: 80\n            pathType: ImplementationSpecific\n```\n\nc. apply the changes:\n\n```bash\nkubectl apply -f k8s.yaml --context kind-kind\n\n```\n\n## 4. Testing\n\na. with curl\n\n```\ncurl --url http://localhost/test --header 'HOST: node-app.com'\n```\n\nor\n\nb. with `/etc/hosts`\n\n- Add `127.0.0.1 node-app.com` to `/etc/hosts`\n- Access node-app.com on any browser\n\n## 5. Done?\n\nSo, destroy the cluster to release memory:\n\n```bash\nkind delete cluster\n```\n\n## So...\n\nIf you tried it and worked (or not), pls let me know.\n\nFor me it worked, I hope it help others and my future self\n"}]},"__N_SSG":true}